

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Mon Jan 15 23:40:46 2024

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F627A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17     0000                     
    18                           ; Generated 22/03/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F627A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52     0000                     	;# 
    53     0001                     	;# 
    54     0002                     	;# 
    55     0003                     	;# 
    56     0004                     	;# 
    57     0005                     	;# 
    58     0006                     	;# 
    59     000A                     	;# 
    60     000B                     	;# 
    61     000C                     	;# 
    62     000E                     	;# 
    63     000E                     	;# 
    64     000F                     	;# 
    65     0010                     	;# 
    66     0011                     	;# 
    67     0012                     	;# 
    68     0015                     	;# 
    69     0015                     	;# 
    70     0016                     	;# 
    71     0017                     	;# 
    72     0018                     	;# 
    73     0019                     	;# 
    74     001A                     	;# 
    75     001F                     	;# 
    76     0081                     	;# 
    77     0085                     	;# 
    78     0086                     	;# 
    79     008C                     	;# 
    80     008E                     	;# 
    81     0092                     	;# 
    82     0098                     	;# 
    83     0099                     	;# 
    84     009A                     	;# 
    85     009B                     	;# 
    86     009C                     	;# 
    87     009D                     	;# 
    88     009F                     	;# 
    89     0000                     	;# 
    90     0001                     	;# 
    91     0002                     	;# 
    92     0003                     	;# 
    93     0004                     	;# 
    94     0005                     	;# 
    95     0006                     	;# 
    96     000A                     	;# 
    97     000B                     	;# 
    98     000C                     	;# 
    99     000E                     	;# 
   100     000E                     	;# 
   101     000F                     	;# 
   102     0010                     	;# 
   103     0011                     	;# 
   104     0012                     	;# 
   105     0015                     	;# 
   106     0015                     	;# 
   107     0016                     	;# 
   108     0017                     	;# 
   109     0018                     	;# 
   110     0019                     	;# 
   111     001A                     	;# 
   112     001F                     	;# 
   113     0081                     	;# 
   114     0085                     	;# 
   115     0086                     	;# 
   116     008C                     	;# 
   117     008E                     	;# 
   118     0092                     	;# 
   119     0098                     	;# 
   120     0099                     	;# 
   121     009A                     	;# 
   122     009B                     	;# 
   123     009C                     	;# 
   124     009D                     	;# 
   125     009F                     	;# 
   126                           
   127                           	psect	strings
   128     0002                     __pstrings:
   129     0002                     stringtab:
   130     0002                     __stringtab:
   131     0002                     stringcode:	
   132                           ;	String table - string pointers are 1 byte each
   133                           
   134     0002                     stringdir:
   135     0002  3000               	movlw	high stringdir
   136     0003  008A               	movwf	10
   137     0004  0804               	movf	4,w
   138     0005  0A84               	incf	4,f
   139     0006  0782               	addwf	2,f
   140     0007                     __stringbase:
   141     0007  3400               	retlw	0
   142     0008                     __end_of__stringtab:
   143     0008                     _volset_cmd:
   144     0008  347E               	retlw	126
   145     0009  34FF               	retlw	255
   146     000A  3406               	retlw	6
   147     000B  3406               	retlw	6
   148     000C  3400               	retlw	0
   149     000D  3400               	retlw	0
   150     000E  3400               	retlw	0
   151     000F  34EF               	retlw	239
   152     0010                     __end_of_volset_cmd:
   153     0010                     _voldown_cmd:
   154     0010  347E               	retlw	126
   155     0011  34FF               	retlw	255
   156     0012  3406               	retlw	6
   157     0013  3405               	retlw	5
   158     0014  3400               	retlw	0
   159     0015  3400               	retlw	0
   160     0016  3400               	retlw	0
   161     0017  34EF               	retlw	239
   162     0018                     __end_of_voldown_cmd:
   163     0018                     _volup_cmd:
   164     0018  347E               	retlw	126
   165     0019  34FF               	retlw	255
   166     001A  3406               	retlw	6
   167     001B  3404               	retlw	4
   168     001C  3400               	retlw	0
   169     001D  3400               	retlw	0
   170     001E  3400               	retlw	0
   171     001F  34EF               	retlw	239
   172     0020                     __end_of_volup_cmd:
   173     0020                     _pause_cmd:
   174     0020  347E               	retlw	126
   175     0021  34FF               	retlw	255
   176     0022  3406               	retlw	6
   177     0023  340E               	retlw	14
   178     0024  3400               	retlw	0
   179     0025  3400               	retlw	0
   180     0026  3400               	retlw	0
   181     0027  34EF               	retlw	239
   182     0028                     __end_of_pause_cmd:
   183     0005                     _PORTAbits	set	5
   184     0006                     _PORTBbits	set	6
   185     0019                     _TXREG	set	25
   186     0012                     _T2CON	set	18
   187     0017                     _CCP1CONbits	set	23
   188     0015                     _CCPR1L	set	21
   189     0018                     _RCSTAbits	set	24
   190     001F                     _CMCONbits	set	31
   191     0099                     _SPBRG	set	153
   192     0098                     _TXSTAbits	set	152
   193     0092                     _PR2	set	146
   194     0434                     _TRISB4	set	1076
   195     0436                     _TRISB6	set	1078
   196     0435                     _TRISB5	set	1077
   197     0430                     _TRISB0	set	1072
   198     042F                     _TRISA7	set	1071
   199     0429                     _TRISA1	set	1065
   200     0428                     _TRISA0	set	1064
   201     0433                     _TRISB3	set	1075
   202     0432                     _TRISB2	set	1074
   203     0431                     _TRISB1	set	1073
   204                           
   205                           	psect	cinit
   206     03F4                     start_initialization:	
   207                           ; #config settings
   208                           
   209     03F4                     __initialization:
   210                           
   211                           ; Clear objects allocated to BANK0
   212     03F4  1283               	bcf	3,5	;RP0=0, select bank0
   213     03F5  1303               	bcf	3,6	;RP1=0, select bank0
   214     03F6  01B2               	clrf	__pbssBANK0& (0+127)
   215     03F7  01B3               	clrf	(__pbssBANK0+1)& (0+127)
   216     03F8  01B4               	clrf	(__pbssBANK0+2)& (0+127)
   217     03F9  01B5               	clrf	(__pbssBANK0+3)& (0+127)
   218     03FA  01B6               	clrf	(__pbssBANK0+4)& (0+127)
   219     03FB  01B7               	clrf	(__pbssBANK0+5)& (0+127)
   220     03FC  01B8               	clrf	(__pbssBANK0+6)& (0+127)
   221     03FD  01B9               	clrf	(__pbssBANK0+7)& (0+127)
   222     03FE                     end_of_initialization:	
   223                           ;End of C runtime variable initialization code
   224                           
   225     03FE                     __end_of__initialization:
   226     03FE  0183               	clrf	3
   227     03FF  2B71               	ljmp	_main	;jump to C main() function
   228                           
   229                           	psect	bssBANK0
   230     0032                     __pbssBANK0:
   231     0032                     UART_transmit@F573:
   232     0032                     	ds	8
   233                           
   234                           	psect	cstackCOMMON
   235     0071                     __pcstackCOMMON:
   236     0071                     ?_checkbit:
   237     0071                     ?_init:	
   238                           ; 1 bytes @ 0x0
   239                           
   240     0071                     ?_motor_switch:	
   241                           ; 1 bytes @ 0x0
   242                           
   243     0071                     ?_UART_transmit:	
   244                           ; 1 bytes @ 0x0
   245                           
   246     0071                     ?_Flash:	
   247                           ; 1 bytes @ 0x0
   248                           
   249     0071                     ??_Flash:	
   250                           ; 1 bytes @ 0x0
   251                           
   252     0071                     ?_main:	
   253                           ; 1 bytes @ 0x0
   254                           
   255     0071                     UART_transmit@feedback:	
   256                           ; 1 bytes @ 0x0
   257                           
   258     0071                     checkbit@data:	
   259                           ; 1 bytes @ 0x0
   260                           
   261     0071                     motor_switch@x:	
   262                           ; 2 bytes @ 0x0
   263                           
   264                           
   265                           ; 2 bytes @ 0x0
   266     0071                     	ds	1
   267     0072                     UART_transmit@para1:
   268                           
   269                           ; 1 bytes @ 0x1
   270     0072                     	ds	1
   271     0073                     ??_motor_switch:
   272     0073                     UART_transmit@para2:	
   273                           ; 1 bytes @ 0x2
   274                           
   275     0073                     checkbit@position:	
   276                           ; 1 bytes @ 0x2
   277                           
   278                           
   279                           ; 2 bytes @ 0x2
   280     0073                     	ds	1
   281     0074                     ??_UART_transmit:
   282                           
   283                           ; 1 bytes @ 0x3
   284     0074                     	ds	1
   285     0075                     ??_checkbit:
   286                           
   287                           ; 1 bytes @ 0x4
   288     0075                     	ds	5
   289     007A                     ??_init:
   290                           
   291                           ; 1 bytes @ 0x9
   292     007A                     	ds	2
   293     007C                     init@duty_cycle:
   294                           
   295                           ; 2 bytes @ 0xB
   296     007C                     	ds	2
   297                           
   298                           	psect	cstackBANK0
   299     0020                     __pcstackBANK0:
   300     0020                     UART_transmit@cmd:
   301                           
   302                           ; 8 bytes @ 0x0
   303     0020                     	ds	8
   304     0028                     UART_transmit@CMD:
   305                           
   306                           ; 1 bytes @ 0x8
   307     0028                     	ds	1
   308     0029                     UART_transmit@i_227:
   309                           
   310                           ; 2 bytes @ 0x9
   311     0029                     	ds	2
   312     002B                     UART_transmit@i:
   313                           
   314                           ; 2 bytes @ 0xB
   315     002B                     	ds	2
   316     002D                     ??_main:
   317                           
   318                           ; 1 bytes @ 0xD
   319     002D                     	ds	3
   320     0030                     main@i:
   321                           
   322                           ; 2 bytes @ 0x10
   323     0030                     	ds	2
   324                           
   325                           	psect	maintext
   326     0371                     __pmaintext:	
   327 ;;
   328 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   329 ;;
   330 ;; *************** function _main *****************
   331 ;; Defined at:
   332 ;;		line 119 in file "main.c"
   333 ;; Parameters:    Size  Location     Type
   334 ;;		None
   335 ;; Auto vars:     Size  Location     Type
   336 ;;  i               2   16[BANK0 ] int 
   337 ;; Return value:  Size  Location     Type
   338 ;;                  1    wreg      void 
   339 ;; Registers used:
   340 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   341 ;; Tracked objects:
   342 ;;		On entry : B00/0
   343 ;;		On exit  : 0/0
   344 ;;		Unchanged: 0/0
   345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   346 ;;      Params:         0       0       0       0
   347 ;;      Locals:         0       2       0       0
   348 ;;      Temps:          0       3       0       0
   349 ;;      Totals:         0       5       0       0
   350 ;;Total ram usage:        5 bytes
   351 ;; Hardware stack levels required when called: 2
   352 ;; This function calls:
   353 ;;		_Flash
   354 ;;		_UART_transmit
   355 ;;		_init
   356 ;;		_motor_switch
   357 ;; This function is called by:
   358 ;;		Startup code after reset
   359 ;; This function uses a non-reentrant model
   360 ;;
   361                           
   362     0371                     _main:	
   363                           ;psect for function _main
   364                           
   365     0371                     l952:	
   366                           ;incstack = 0
   367                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   368                           
   369                           
   370                           ;main.c: 121:     init();
   371     0371  230E               	fcall	_init
   372     0372                     l954:
   373                           
   374                           ;main.c: 122:     for (int i = 1; i < 5; i++){
   375     0372  3001               	movlw	1
   376     0373  1283               	bcf	3,5	;RP0=0, select bank0
   377     0374  1303               	bcf	3,6	;RP1=0, select bank0
   378     0375  00B0               	movwf	main@i
   379     0376  3000               	movlw	0
   380     0377  00B1               	movwf	main@i+1
   381     0378                     l960:
   382                           
   383                           ;main.c: 123:         UART_transmit(volset_cmd, 0x00, 0x00, 0x14);
   384     0378  01F1               	clrf	UART_transmit@feedback
   385     0379  01F2               	clrf	UART_transmit@para1
   386     037A  3014               	movlw	20
   387     037B  00F3               	movwf	UART_transmit@para2
   388     037C  3001               	movlw	(low ((_volset_cmd-__stringbase)| (0+32768)))& (0+255)
   389     037D  22AF               	fcall	_UART_transmit
   390     037E                     l962:
   391                           
   392                           ;main.c: 124:     };
   393     037E  3001               	movlw	1
   394     037F  1283               	bcf	3,5	;RP0=0, select bank0
   395     0380  1303               	bcf	3,6	;RP1=0, select bank0
   396     0381  07B0               	addwf	main@i,f
   397     0382  1803               	skipnc
   398     0383  0AB1               	incf	main@i+1,f
   399     0384  3000               	movlw	0
   400     0385  07B1               	addwf	main@i+1,f
   401     0386                     l964:
   402     0386  0831               	movf	main@i+1,w
   403     0387  3A80               	xorlw	128
   404     0388  00FF               	movwf	btemp+1
   405     0389  3080               	movlw	128
   406     038A  027F               	subwf	btemp+1,w
   407     038B  1D03               	skipz
   408     038C  2B8F               	goto	u295
   409     038D  3005               	movlw	5
   410     038E  0230               	subwf	main@i,w
   411     038F                     u295:
   412     038F  1C03               	skipc
   413     0390  2B92               	goto	u291
   414     0391  2B93               	goto	u290
   415     0392                     u291:
   416     0392  2B78               	goto	l960
   417     0393                     u290:
   418     0393                     l84:	
   419                           ;main.c: 126:     while(1){
   420                           
   421                           
   422                           ;main.c: 127:         if (PORTAbits.RA0){
   423     0393  1283               	bcf	3,5	;RP0=0, select bank0
   424     0394  1303               	bcf	3,6	;RP1=0, select bank0
   425     0395  1C05               	btfss	5,0	;volatile
   426     0396  2B98               	goto	u301
   427     0397  2B99               	goto	u300
   428     0398                     u301:
   429     0398  2B93               	goto	l84
   430     0399                     u300:
   431     0399                     l86:
   432     0399  1805               	btfsc	5,0	;volatile
   433     039A  2B9C               	goto	u311
   434     039B  2B9D               	goto	u310
   435     039C                     u311:
   436     039C  2B99               	goto	l86
   437     039D                     u310:
   438     039D                     l968:
   439                           
   440                           ;main.c: 129:             motor_switch(1);
   441     039D  3001               	movlw	1
   442     039E  00F1               	movwf	motor_switch@x
   443     039F  3000               	movlw	0
   444     03A0  00F2               	movwf	motor_switch@x+1
   445     03A1  2282               	fcall	_motor_switch
   446                           
   447                           ;main.c: 131:             Flash();
   448     03A2  2272               	fcall	_Flash
   449     03A3                     l970:
   450                           
   451                           ;main.c: 132:             PORTAbits.RA1 = 1;
   452     03A3  1283               	bcf	3,5	;RP0=0, select bank0
   453     03A4  1303               	bcf	3,6	;RP1=0, select bank0
   454     03A5  1485               	bsf	5,1	;volatile
   455     03A6                     l972:
   456                           
   457                           ;main.c: 133:             _delay((unsigned long)((500)*(16000000/4000.0)));
   458     03A6  300B               	movlw	11
   459     03A7  1283               	bcf	3,5	;RP0=0, select bank0
   460     03A8  1303               	bcf	3,6	;RP1=0, select bank0
   461     03A9  00AF               	movwf	??_main+2
   462     03AA  3026               	movlw	38
   463     03AB  00AE               	movwf	??_main+1
   464     03AC  305D               	movlw	93
   465     03AD  00AD               	movwf	??_main
   466     03AE                     u397:
   467     03AE  0BAD               	decfsz	??_main,f
   468     03AF  2BAE               	goto	u397
   469     03B0  0BAE               	decfsz	??_main+1,f
   470     03B1  2BAE               	goto	u397
   471     03B2  0BAF               	decfsz	??_main+2,f
   472     03B3  2BAE               	goto	u397
   473     03B4  0000               	nop
   474     03B5                     l974:
   475                           
   476                           ;main.c: 134:             PORTAbits.RA1 = 0;
   477     03B5  1283               	bcf	3,5	;RP0=0, select bank0
   478     03B6  1303               	bcf	3,6	;RP1=0, select bank0
   479     03B7  1085               	bcf	5,1	;volatile
   480                           
   481                           ;main.c: 136:             while(!PORTAbits.RA7){
   482     03B8  2BE7               	goto	l998
   483     03B9                     l90:
   484                           
   485                           ;main.c: 137:                 if (PORTBbits.RB0){
   486     03B9  1C06               	btfss	6,0	;volatile
   487     03BA  2BBC               	goto	u321
   488     03BB  2BBD               	goto	u320
   489     03BC                     u321:
   490     03BC  2BC7               	goto	l982
   491     03BD                     u320:
   492     03BD                     l92:
   493     03BD  1806               	btfsc	6,0	;volatile
   494     03BE  2BC0               	goto	u331
   495     03BF  2BC1               	goto	u330
   496     03C0                     u331:
   497     03C0  2BBD               	goto	l92
   498     03C1                     u330:
   499     03C1                     l978:
   500                           
   501                           ;main.c: 139:                     UART_transmit(pause_cmd, 0x00, 0x00, 0x00);
   502     03C1  01F1               	clrf	UART_transmit@feedback
   503     03C2  01F2               	clrf	UART_transmit@para1
   504     03C3  01F3               	clrf	UART_transmit@para2
   505     03C4  3019               	movlw	(low ((_pause_cmd-__stringbase)| (0+32768)))& (0+255)
   506     03C5  22AF               	fcall	_UART_transmit
   507     03C6                     l980:
   508                           
   509                           ;main.c: 140:                     Flash();
   510     03C6  2272               	fcall	_Flash
   511     03C7                     l982:
   512                           
   513                           ;main.c: 142:                 if (PORTBbits.RB6){
   514     03C7  1283               	bcf	3,5	;RP0=0, select bank0
   515     03C8  1303               	bcf	3,6	;RP1=0, select bank0
   516     03C9  1F06               	btfss	6,6	;volatile
   517     03CA  2BCC               	goto	u341
   518     03CB  2BCD               	goto	u340
   519     03CC                     u341:
   520     03CC  2BD7               	goto	l990
   521     03CD                     u340:
   522     03CD                     l96:
   523     03CD  1B06               	btfsc	6,6	;volatile
   524     03CE  2BD0               	goto	u351
   525     03CF  2BD1               	goto	u350
   526     03D0                     u351:
   527     03D0  2BCD               	goto	l96
   528     03D1                     u350:
   529     03D1                     l986:
   530                           
   531                           ;main.c: 144:                     UART_transmit(volup_cmd, 0x00, 0x00, 0x00);
   532     03D1  01F1               	clrf	UART_transmit@feedback
   533     03D2  01F2               	clrf	UART_transmit@para1
   534     03D3  01F3               	clrf	UART_transmit@para2
   535     03D4  3011               	movlw	(low ((_volup_cmd-__stringbase)| (0+32768)))& (0+255)
   536     03D5  22AF               	fcall	_UART_transmit
   537     03D6                     l988:
   538                           
   539                           ;main.c: 145:                     Flash();
   540     03D6  2272               	fcall	_Flash
   541     03D7                     l990:
   542                           
   543                           ;main.c: 147:                 if (PORTBbits.RB4){
   544     03D7  1283               	bcf	3,5	;RP0=0, select bank0
   545     03D8  1303               	bcf	3,6	;RP1=0, select bank0
   546     03D9  1E06               	btfss	6,4	;volatile
   547     03DA  2BDC               	goto	u361
   548     03DB  2BDD               	goto	u360
   549     03DC                     u361:
   550     03DC  2BE7               	goto	l998
   551     03DD                     u360:
   552     03DD                     l100:
   553     03DD  1A06               	btfsc	6,4	;volatile
   554     03DE  2BE0               	goto	u371
   555     03DF  2BE1               	goto	u370
   556     03E0                     u371:
   557     03E0  2BDD               	goto	l100
   558     03E1                     u370:
   559     03E1                     l994:
   560                           
   561                           ;main.c: 149:                     UART_transmit(voldown_cmd, 0x00, 0x00, 0x00);
   562     03E1  01F1               	clrf	UART_transmit@feedback
   563     03E2  01F2               	clrf	UART_transmit@para1
   564     03E3  01F3               	clrf	UART_transmit@para2
   565     03E4  3009               	movlw	(low ((_voldown_cmd-__stringbase)| (0+32768)))& (0+255)
   566     03E5  22AF               	fcall	_UART_transmit
   567     03E6                     l996:
   568                           
   569                           ;main.c: 150:                     Flash();
   570     03E6  2272               	fcall	_Flash
   571     03E7                     l998:
   572                           
   573                           ;main.c: 136:             while(!PORTAbits.RA7){
   574     03E7  1283               	bcf	3,5	;RP0=0, select bank0
   575     03E8  1303               	bcf	3,6	;RP1=0, select bank0
   576     03E9  1F85               	btfss	5,7	;volatile
   577     03EA  2BEC               	goto	u381
   578     03EB  2BED               	goto	u380
   579     03EC                     u381:
   580     03EC  2BB9               	goto	l90
   581     03ED                     u380:
   582     03ED                     l1000:
   583                           
   584                           ;main.c: 154:             motor_switch(0);
   585     03ED  3000               	movlw	0
   586     03EE  00F1               	movwf	motor_switch@x
   587     03EF  00F2               	movwf	motor_switch@x+1
   588     03F0  2282               	fcall	_motor_switch
   589                           
   590                           ;main.c: 155:             Flash();
   591     03F1  2272               	fcall	_Flash
   592     03F2  2B93               	goto	l84
   593     03F3  2801               	ljmp	start
   594     03F4                     __end_of_main:
   595                           
   596                           	psect	text1
   597     0282                     __ptext1:	
   598 ;; *************** function _motor_switch *****************
   599 ;; Defined at:
   600 ;;		line 87 in file "main.c"
   601 ;; Parameters:    Size  Location     Type
   602 ;;  x               2    0[COMMON] int 
   603 ;; Auto vars:     Size  Location     Type
   604 ;;		None
   605 ;; Return value:  Size  Location     Type
   606 ;;                  1    wreg      void 
   607 ;; Registers used:
   608 ;;		wreg, status,2, status,0
   609 ;; Tracked objects:
   610 ;;		On entry : 0/0
   611 ;;		On exit  : 0/0
   612 ;;		Unchanged: 0/0
   613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   614 ;;      Params:         2       0       0       0
   615 ;;      Locals:         0       0       0       0
   616 ;;      Temps:          0       0       0       0
   617 ;;      Totals:         2       0       0       0
   618 ;;Total ram usage:        2 bytes
   619 ;; Hardware stack levels used: 1
   620 ;; This function calls:
   621 ;;		Nothing
   622 ;; This function is called by:
   623 ;;		_main
   624 ;; This function uses a non-reentrant model
   625 ;;
   626                           
   627     0282                     _motor_switch:	
   628                           ;psect for function _motor_switch
   629                           
   630     0282                     l910:	
   631                           ;incstack = 0
   632                           ; Regs used in _motor_switch: [wreg+status,2+status,0]
   633                           
   634                           
   635                           ;main.c: 88:     if (x){
   636     0282  0871               	movf	motor_switch@x,w
   637     0283  0472               	iorwf	motor_switch@x+1,w
   638     0284  1903               	btfsc	3,2
   639     0285  2A87               	goto	u251
   640     0286  2A88               	goto	u250
   641     0287                     u251:
   642     0287  2A8F               	goto	l914
   643     0288                     u250:
   644     0288                     l912:
   645                           
   646                           ;main.c: 89:         CCP1CONbits.CCP1M = 0b1100;
   647     0288  1283               	bcf	3,5	;RP0=0, select bank0
   648     0289  1303               	bcf	3,6	;RP1=0, select bank0
   649     028A  0817               	movf	23,w	;volatile
   650     028B  39F0               	andlw	-16
   651     028C  380C               	iorlw	12
   652     028D  0097               	movwf	23	;volatile
   653                           
   654                           ;main.c: 90:     }
   655     028E  2A93               	goto	l65
   656     028F                     l914:
   657                           
   658                           ;main.c: 92:         CCP1CONbits.CCP1M = 0b0000;
   659     028F  30F0               	movlw	-16
   660     0290  1283               	bcf	3,5	;RP0=0, select bank0
   661     0291  1303               	bcf	3,6	;RP1=0, select bank0
   662     0292  0597               	andwf	23,f	;volatile
   663     0293                     l65:
   664     0293  0008               	return
   665     0294                     __end_of_motor_switch:
   666                           
   667                           	psect	text2
   668     030E                     __ptext2:	
   669 ;; *************** function _init *****************
   670 ;; Defined at:
   671 ;;		line 39 in file "main.c"
   672 ;; Parameters:    Size  Location     Type
   673 ;;		None
   674 ;; Auto vars:     Size  Location     Type
   675 ;;  duty_cycle      2   11[COMMON] unsigned int 
   676 ;; Return value:  Size  Location     Type
   677 ;;                  1    wreg      void 
   678 ;; Registers used:
   679 ;;		wreg, status,2, status,0, pclath, cstack
   680 ;; Tracked objects:
   681 ;;		On entry : 0/0
   682 ;;		On exit  : 0/0
   683 ;;		Unchanged: 0/0
   684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   685 ;;      Params:         0       0       0       0
   686 ;;      Locals:         2       0       0       0
   687 ;;      Temps:          2       0       0       0
   688 ;;      Totals:         4       0       0       0
   689 ;;Total ram usage:        4 bytes
   690 ;; Hardware stack levels used: 1
   691 ;; Hardware stack levels required when called: 1
   692 ;; This function calls:
   693 ;;		_checkbit
   694 ;; This function is called by:
   695 ;;		_main
   696 ;; This function uses a non-reentrant model
   697 ;;
   698                           
   699     030E                     _init:	
   700                           ;psect for function _init
   701                           
   702     030E                     l854:	
   703                           ;incstack = 0
   704                           ; Regs used in _init: [wreg+status,2+status,0+pclath+cstack]
   705                           
   706                           
   707                           ;main.c: 41:     CMCONbits.CM = 0b111;
   708     030E  3007               	movlw	7
   709     030F  1283               	bcf	3,5	;RP0=0, select bank0
   710     0310  1303               	bcf	3,6	;RP1=0, select bank0
   711     0311  049F               	iorwf	31,f	;volatile
   712     0312                     l856:
   713                           
   714                           ;main.c: 42:     CMCONbits.CIS = 0;
   715     0312  119F               	bcf	31,3	;volatile
   716     0313                     l858:
   717                           
   718                           ;main.c: 43:     CMCONbits.C1INV = 0;
   719     0313  121F               	bcf	31,4	;volatile
   720     0314                     l860:
   721                           
   722                           ;main.c: 44:     CMCONbits.C2INV = 0;
   723     0314  129F               	bcf	31,5	;volatile
   724     0315                     l862:
   725                           
   726                           ;main.c: 47:     TRISB1 = 1;
   727     0315  1683               	bsf	3,5	;RP0=1, select bank1
   728     0316  1303               	bcf	3,6	;RP1=0, select bank1
   729     0317  1486               	bsf	6,1	;volatile
   730     0318                     l864:
   731                           
   732                           ;main.c: 48:     TRISB2 = 0;
   733     0318  1106               	bcf	6,2	;volatile
   734     0319                     l866:
   735                           
   736                           ;main.c: 49:     RCSTAbits.SPEN = 1;
   737     0319  1283               	bcf	3,5	;RP0=0, select bank0
   738     031A  1303               	bcf	3,6	;RP1=0, select bank0
   739     031B  1798               	bsf	24,7	;volatile
   740     031C                     l868:
   741                           
   742                           ;main.c: 51:     TXSTAbits.SYNC = 0;
   743     031C  1683               	bsf	3,5	;RP0=1, select bank1
   744     031D  1303               	bcf	3,6	;RP1=0, select bank1
   745     031E  1218               	bcf	24,4	;volatile
   746     031F                     l870:
   747                           
   748                           ;main.c: 52:     TXSTAbits.BRGH = 1;
   749     031F  1518               	bsf	24,2	;volatile
   750     0320                     l872:
   751                           
   752                           ;main.c: 54:     TXSTAbits.TXEN = 1;
   753     0320  1698               	bsf	24,5	;volatile
   754     0321                     l874:
   755                           
   756                           ;main.c: 55:     RCSTAbits.CREN = 0;
   757     0321  1283               	bcf	3,5	;RP0=0, select bank0
   758     0322  1303               	bcf	3,6	;RP1=0, select bank0
   759     0323  1218               	bcf	24,4	;volatile
   760     0324                     l876:
   761                           
   762                           ;main.c: 58:     SPBRG = 25;
   763     0324  3019               	movlw	25
   764     0325  1683               	bsf	3,5	;RP0=1, select bank1
   765     0326  1303               	bcf	3,6	;RP1=0, select bank1
   766     0327  0099               	movwf	25	;volatile
   767     0328                     l878:
   768                           
   769                           ;main.c: 62:     PR2 = (uint8_t)((16000000/(4*16*1))-1);
   770     0328  308F               	movlw	143
   771     0329  0092               	movwf	18	;volatile
   772     032A                     l880:
   773                           
   774                           ;main.c: 63:     uint16_t duty_cycle = (uint16_t) ((100/100)*PR2);
   775     032A  0812               	movf	18,w	;volatile
   776     032B  00FA               	movwf	??_init
   777     032C  01FB               	clrf	??_init+1
   778     032D  087A               	movf	??_init,w
   779     032E  00FC               	movwf	init@duty_cycle
   780     032F  087B               	movf	??_init+1,w
   781     0330  00FD               	movwf	init@duty_cycle+1
   782     0331                     l882:
   783                           
   784                           ;main.c: 64:     CCPR1L = duty_cycle >> 2;
   785     0331  087D               	movf	init@duty_cycle+1,w
   786     0332  00FB               	movwf	??_init+1
   787     0333  087C               	movf	init@duty_cycle,w
   788     0334  00FA               	movwf	??_init
   789     0335  1003               	clrc
   790     0336  0CFB               	rrf	??_init+1,f
   791     0337  0CFA               	rrf	??_init,f
   792     0338  1003               	clrc
   793     0339  0CFB               	rrf	??_init+1,f
   794     033A  0CFA               	rrf	??_init,f
   795     033B  087A               	movf	??_init,w
   796     033C  1283               	bcf	3,5	;RP0=0, select bank0
   797     033D  1303               	bcf	3,6	;RP1=0, select bank0
   798     033E  0095               	movwf	21	;volatile
   799     033F                     l884:
   800                           
   801                           ;main.c: 66:     if (checkbit(duty_cycle, 0)){
   802     033F  087D               	movf	init@duty_cycle+1,w
   803     0340  00F2               	movwf	checkbit@data+1
   804     0341  087C               	movf	init@duty_cycle,w
   805     0342  00F1               	movwf	checkbit@data
   806     0343  3000               	movlw	0
   807     0344  00F3               	movwf	checkbit@position
   808     0345  00F4               	movwf	checkbit@position+1
   809     0346  2294               	fcall	_checkbit
   810     0347  3A00               	xorlw	0
   811     0348  1903               	skipnz
   812     0349  2B4B               	goto	u231
   813     034A  2B4C               	goto	u230
   814     034B                     u231:
   815     034B  2B4F               	goto	l888
   816     034C                     u230:
   817     034C                     l886:
   818                           
   819                           ;main.c: 67:         CCP1CONbits.CCP1Y = 1;
   820     034C  1283               	bcf	3,5	;RP0=0, select bank0
   821     034D  1303               	bcf	3,6	;RP1=0, select bank0
   822     034E  1617               	bsf	23,4	;volatile
   823     034F                     l888:
   824                           
   825                           ;main.c: 69:     if (checkbit(duty_cycle, 1)){
   826     034F  087D               	movf	init@duty_cycle+1,w
   827     0350  00F2               	movwf	checkbit@data+1
   828     0351  087C               	movf	init@duty_cycle,w
   829     0352  00F1               	movwf	checkbit@data
   830     0353  3001               	movlw	1
   831     0354  00F3               	movwf	checkbit@position
   832     0355  3000               	movlw	0
   833     0356  00F4               	movwf	checkbit@position+1
   834     0357  2294               	fcall	_checkbit
   835     0358  3A00               	xorlw	0
   836     0359  1903               	skipnz
   837     035A  2B5C               	goto	u241
   838     035B  2B5D               	goto	u240
   839     035C                     u241:
   840     035C  2B60               	goto	l59
   841     035D                     u240:
   842     035D                     l890:
   843                           
   844                           ;main.c: 70:         CCP1CONbits.CCP1X = 1;
   845     035D  1283               	bcf	3,5	;RP0=0, select bank0
   846     035E  1303               	bcf	3,6	;RP1=0, select bank0
   847     035F  1697               	bsf	23,5	;volatile
   848     0360                     l59:	
   849                           ;main.c: 71:     };
   850                           
   851                           
   852                           ;main.c: 72:     TRISB3 = 0;
   853     0360  1683               	bsf	3,5	;RP0=1, select bank1
   854     0361  1303               	bcf	3,6	;RP1=0, select bank1
   855     0362  1186               	bcf	6,3	;volatile
   856     0363                     l892:
   857                           
   858                           ;main.c: 73:     T2CON = 0b00000110;
   859     0363  3006               	movlw	6
   860     0364  1283               	bcf	3,5	;RP0=0, select bank0
   861     0365  1303               	bcf	3,6	;RP1=0, select bank0
   862     0366  0092               	movwf	18	;volatile
   863     0367                     l894:
   864                           
   865                           ;main.c: 77:     TRISA0 = 1;
   866     0367  1683               	bsf	3,5	;RP0=1, select bank1
   867     0368  1303               	bcf	3,6	;RP1=0, select bank1
   868     0369  1405               	bsf	5,0	;volatile
   869     036A                     l896:
   870                           
   871                           ;main.c: 78:     TRISA1 = 0;
   872     036A  1085               	bcf	5,1	;volatile
   873     036B                     l898:
   874                           
   875                           ;main.c: 79:     TRISA7 = 1;
   876     036B  1785               	bsf	5,7	;volatile
   877     036C                     l900:
   878                           
   879                           ;main.c: 80:     TRISB0 = 1;
   880     036C  1406               	bsf	6,0	;volatile
   881     036D                     l902:
   882                           
   883                           ;main.c: 81:     TRISB5 = 0;
   884     036D  1286               	bcf	6,5	;volatile
   885     036E                     l904:
   886                           
   887                           ;main.c: 82:     TRISB6 = 1;
   888     036E  1706               	bsf	6,6	;volatile
   889     036F                     l906:
   890                           
   891                           ;main.c: 83:     TRISB4 = 1;
   892     036F  1606               	bsf	6,4	;volatile
   893     0370                     l60:
   894     0370  0008               	return
   895     0371                     __end_of_init:
   896                           
   897                           	psect	text3
   898     0294                     __ptext3:	
   899 ;; *************** function _checkbit *****************
   900 ;; Defined at:
   901 ;;		line 35 in file "main.c"
   902 ;; Parameters:    Size  Location     Type
   903 ;;  data            2    0[COMMON] unsigned int 
   904 ;;  position        2    2[COMMON] int 
   905 ;; Auto vars:     Size  Location     Type
   906 ;;		None
   907 ;; Return value:  Size  Location     Type
   908 ;;                  1    wreg      _Bool 
   909 ;; Registers used:
   910 ;;		wreg, status,2, status,0
   911 ;; Tracked objects:
   912 ;;		On entry : 0/0
   913 ;;		On exit  : 0/0
   914 ;;		Unchanged: 0/0
   915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   916 ;;      Params:         4       0       0       0
   917 ;;      Locals:         0       0       0       0
   918 ;;      Temps:          5       0       0       0
   919 ;;      Totals:         9       0       0       0
   920 ;;Total ram usage:        9 bytes
   921 ;; Hardware stack levels used: 1
   922 ;; This function calls:
   923 ;;		Nothing
   924 ;; This function is called by:
   925 ;;		_init
   926 ;; This function uses a non-reentrant model
   927 ;;
   928                           
   929     0294                     _checkbit:	
   930                           ;psect for function _checkbit
   931                           
   932     0294                     l850:	
   933                           ;incstack = 0
   934                           ; Regs used in _checkbit: [wreg+status,2+status,0]
   935                           
   936                           
   937                           ;main.c: 36:     return data & (1 << position);
   938     0294  0A73               	incf	checkbit@position,w
   939     0295  00F5               	movwf	??_checkbit
   940     0296  3001               	movlw	1
   941     0297  00F6               	movwf	??_checkbit+1
   942     0298  3000               	movlw	0
   943     0299  00F7               	movwf	??_checkbit+2
   944     029A  2A9E               	goto	u204
   945     029B                     u205:
   946     029B  1003               	clrc
   947     029C  0DF6               	rlf	??_checkbit+1,f
   948     029D  0DF7               	rlf	??_checkbit+2,f
   949     029E                     u204:
   950     029E  0BF5               	decfsz	??_checkbit,f
   951     029F  2A9B               	goto	u205
   952     02A0  0871               	movf	checkbit@data,w
   953     02A1  0576               	andwf	??_checkbit+1,w
   954     02A2  00F8               	movwf	??_checkbit+3
   955     02A3  0872               	movf	checkbit@data+1,w
   956     02A4  0577               	andwf	??_checkbit+2,w
   957     02A5  00F9               	movwf	??_checkbit+4
   958     02A6  0878               	movf	??_checkbit+3,w
   959     02A7  0479               	iorwf	??_checkbit+4,w
   960     02A8  1D03               	btfss	3,2
   961     02A9  2AAB               	goto	u211
   962     02AA  2AAD               	goto	u210
   963     02AB                     u211:
   964     02AB  3001               	movlw	1
   965     02AC  2AAE               	goto	u220
   966     02AD                     u210:
   967     02AD  3000               	movlw	0
   968     02AE                     u220:
   969     02AE                     l55:
   970     02AE  0008               	return
   971     02AF                     __end_of_checkbit:
   972                           
   973                           	psect	text4
   974     02AF                     __ptext4:	
   975 ;; *************** function _UART_transmit *****************
   976 ;; Defined at:
   977 ;;		line 95 in file "main.c"
   978 ;; Parameters:    Size  Location     Type
   979 ;;  CMD             1    wreg     PTR unsigned char 
   980 ;;		 -> voldown_cmd(8), volup_cmd(8), pause_cmd(8), volset_cmd(8), 
   981 ;;  feedback        1    0[COMMON] unsigned char 
   982 ;;  para1           1    1[COMMON] unsigned char 
   983 ;;  para2           1    2[COMMON] unsigned char 
   984 ;; Auto vars:     Size  Location     Type
   985 ;;  CMD             1    8[BANK0 ] PTR unsigned char 
   986 ;;		 -> voldown_cmd(8), volup_cmd(8), pause_cmd(8), volset_cmd(8), 
   987 ;;  i               2    9[BANK0 ] int 
   988 ;;  i               2   11[BANK0 ] int 
   989 ;;  cmd             8    0[BANK0 ] unsigned char [8]
   990 ;; Return value:  Size  Location     Type
   991 ;;                  1    wreg      void 
   992 ;; Registers used:
   993 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
   994 ;; Tracked objects:
   995 ;;		On entry : 0/0
   996 ;;		On exit  : 0/0
   997 ;;		Unchanged: 0/0
   998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   999 ;;      Params:         3       0       0       0
  1000 ;;      Locals:         0      13       0       0
  1001 ;;      Temps:          2       0       0       0
  1002 ;;      Totals:         5      13       0       0
  1003 ;;Total ram usage:       18 bytes
  1004 ;; Hardware stack levels used: 2
  1005 ;; This function calls:
  1006 ;;		Nothing
  1007 ;; This function is called by:
  1008 ;;		_main
  1009 ;; This function uses a non-reentrant model
  1010 ;;
  1011                           
  1012     02AF                     _UART_transmit:	
  1013                           ;psect for function _UART_transmit
  1014                           
  1015                           
  1016                           ;incstack = 0
  1017                           ; Regs used in _UART_transmit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  1018                           ;UART_transmit@CMD stored from wreg
  1019     02AF  1283               	bcf	3,5	;RP0=0, select bank0
  1020     02B0  1303               	bcf	3,6	;RP1=0, select bank0
  1021     02B1  00A8               	movwf	UART_transmit@CMD
  1022     02B2                     l916:
  1023                           
  1024                           ;main.c: 97:     unsigned char cmd[8] = {0};
  1025     02B2  3020               	movlw	UART_transmit@cmd& (0+255)
  1026     02B3  0084               	movwf	4
  1027     02B4  3008               	movlw	8
  1028     02B5  00FF               	movwf	btemp+1
  1029     02B6                     u260:
  1030     02B6  1383               	bcf	3,7	;select IRP bank0
  1031     02B7  0180               	clrf	0
  1032     02B8  0A84               	incf	4,f
  1033     02B9  0BFF               	decfsz	btemp+1,f
  1034     02BA  2AB6               	goto	u260
  1035     02BB                     l918:
  1036                           
  1037                           ;main.c: 98:     for (int i = 0; i < 8; i++){
  1038     02BB  01AB               	clrf	UART_transmit@i
  1039     02BC  01AC               	clrf	UART_transmit@i+1
  1040     02BD                     l924:
  1041                           
  1042                           ;main.c: 99:         cmd[i] = CMD[i];
  1043     02BD  1283               	bcf	3,5	;RP0=0, select bank0
  1044     02BE  1303               	bcf	3,6	;RP1=0, select bank0
  1045     02BF  082B               	movf	UART_transmit@i,w
  1046     02C0  0728               	addwf	UART_transmit@CMD,w
  1047     02C1  0084               	movwf	4
  1048     02C2  2002               	fcall	stringdir
  1049     02C3  00F4               	movwf	??_UART_transmit
  1050     02C4  082B               	movf	UART_transmit@i,w
  1051     02C5  3E20               	addlw	(low (UART_transmit@cmd| 0))& (0+255)
  1052     02C6  0084               	movwf	4
  1053     02C7  0874               	movf	??_UART_transmit,w
  1054     02C8  1383               	bcf	3,7	;select IRP bank0
  1055     02C9  0080               	movwf	0
  1056     02CA                     l926:
  1057                           
  1058                           ;main.c: 100:     };
  1059     02CA  3001               	movlw	1
  1060     02CB  07AB               	addwf	UART_transmit@i,f
  1061     02CC  1803               	skipnc
  1062     02CD  0AAC               	incf	UART_transmit@i+1,f
  1063     02CE  3000               	movlw	0
  1064     02CF  07AC               	addwf	UART_transmit@i+1,f
  1065     02D0                     l928:
  1066     02D0  082C               	movf	UART_transmit@i+1,w
  1067     02D1  3A80               	xorlw	128
  1068     02D2  00FF               	movwf	btemp+1
  1069     02D3  3080               	movlw	128
  1070     02D4  027F               	subwf	btemp+1,w
  1071     02D5  1D03               	skipz
  1072     02D6  2AD9               	goto	u275
  1073     02D7  3008               	movlw	8
  1074     02D8  022B               	subwf	UART_transmit@i,w
  1075     02D9                     u275:
  1076     02D9  1C03               	skipc
  1077     02DA  2ADC               	goto	u271
  1078     02DB  2ADD               	goto	u270
  1079     02DC                     u271:
  1080     02DC  2ABD               	goto	l924
  1081     02DD                     u270:
  1082     02DD                     l930:
  1083                           
  1084                           ;main.c: 103:     cmd[4] = feedback;
  1085     02DD  0871               	movf	UART_transmit@feedback,w
  1086     02DE  1283               	bcf	3,5	;RP0=0, select bank0
  1087     02DF  1303               	bcf	3,6	;RP1=0, select bank0
  1088     02E0  00A4               	movwf	UART_transmit@cmd+4
  1089                           
  1090                           ;main.c: 104:     cmd[5] = para1;
  1091     02E1  0872               	movf	UART_transmit@para1,w
  1092     02E2  00A5               	movwf	UART_transmit@cmd+5
  1093                           
  1094                           ;main.c: 105:     cmd[6] = para2;
  1095     02E3  0873               	movf	UART_transmit@para2,w
  1096     02E4  00A6               	movwf	UART_transmit@cmd+6
  1097     02E5                     l932:
  1098                           
  1099                           ;main.c: 107:     for (int i = 0; i < 8; i++) {
  1100     02E5  01A9               	clrf	UART_transmit@i_227
  1101     02E6  01AA               	clrf	UART_transmit@i_227+1
  1102     02E7                     l938:
  1103                           
  1104                           ;main.c: 108:         TXREG = cmd[i];
  1105     02E7  1283               	bcf	3,5	;RP0=0, select bank0
  1106     02E8  1303               	bcf	3,6	;RP1=0, select bank0
  1107     02E9  0829               	movf	UART_transmit@i_227,w
  1108     02EA  3E20               	addlw	(low (UART_transmit@cmd| 0))& (0+255)
  1109     02EB  0084               	movwf	4
  1110     02EC  1383               	bcf	3,7	;select IRP bank0
  1111     02ED  0800               	movf	0,w
  1112     02EE  0099               	movwf	25	;volatile
  1113     02EF                     l940:
  1114                           
  1115                           ;main.c: 109:         _delay((unsigned long)((5)*(16000000/4000.0)));
  1116     02EF  301A               	movlw	26
  1117     02F0  00F5               	movwf	??_UART_transmit+1
  1118     02F1  30F8               	movlw	248
  1119     02F2  00F4               	movwf	??_UART_transmit
  1120     02F3                     u407:
  1121     02F3  0BF4               	decfsz	??_UART_transmit,f
  1122     02F4  2AF3               	goto	u407
  1123     02F5  0BF5               	decfsz	??_UART_transmit+1,f
  1124     02F6  2AF3               	goto	u407
  1125     02F7  0000               	nop
  1126     02F8                     l942:
  1127                           
  1128                           ;main.c: 110:     };
  1129     02F8  3001               	movlw	1
  1130     02F9  1283               	bcf	3,5	;RP0=0, select bank0
  1131     02FA  1303               	bcf	3,6	;RP1=0, select bank0
  1132     02FB  07A9               	addwf	UART_transmit@i_227,f
  1133     02FC  1803               	skipnc
  1134     02FD  0AAA               	incf	UART_transmit@i_227+1,f
  1135     02FE  3000               	movlw	0
  1136     02FF  07AA               	addwf	UART_transmit@i_227+1,f
  1137     0300                     l944:
  1138     0300  082A               	movf	UART_transmit@i_227+1,w
  1139     0301  3A80               	xorlw	128
  1140     0302  00FF               	movwf	btemp+1
  1141     0303  3080               	movlw	128
  1142     0304  027F               	subwf	btemp+1,w
  1143     0305  1D03               	skipz
  1144     0306  2B09               	goto	u285
  1145     0307  3008               	movlw	8
  1146     0308  0229               	subwf	UART_transmit@i_227,w
  1147     0309                     u285:
  1148     0309  1C03               	skipc
  1149     030A  2B0C               	goto	u281
  1150     030B  2B0D               	goto	u280
  1151     030C                     u281:
  1152     030C  2AE7               	goto	l938
  1153     030D                     u280:
  1154     030D                     l74:
  1155     030D  0008               	return
  1156     030E                     __end_of_UART_transmit:
  1157                           
  1158                           	psect	text5
  1159     0272                     __ptext5:	
  1160 ;; *************** function _Flash *****************
  1161 ;; Defined at:
  1162 ;;		line 113 in file "main.c"
  1163 ;; Parameters:    Size  Location     Type
  1164 ;;		None
  1165 ;; Auto vars:     Size  Location     Type
  1166 ;;		None
  1167 ;; Return value:  Size  Location     Type
  1168 ;;                  1    wreg      void 
  1169 ;; Registers used:
  1170 ;;		wreg
  1171 ;; Tracked objects:
  1172 ;;		On entry : 0/0
  1173 ;;		On exit  : 0/0
  1174 ;;		Unchanged: 0/0
  1175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1176 ;;      Params:         0       0       0       0
  1177 ;;      Locals:         0       0       0       0
  1178 ;;      Temps:          2       0       0       0
  1179 ;;      Totals:         2       0       0       0
  1180 ;;Total ram usage:        2 bytes
  1181 ;; Hardware stack levels used: 1
  1182 ;; This function calls:
  1183 ;;		Nothing
  1184 ;; This function is called by:
  1185 ;;		_main
  1186 ;; This function uses a non-reentrant model
  1187 ;;
  1188                           
  1189     0272                     _Flash:	
  1190                           ;psect for function _Flash
  1191                           
  1192     0272                     l946:	
  1193                           ;incstack = 0
  1194                           ; Regs used in _Flash: [wreg]
  1195                           
  1196                           
  1197                           ;main.c: 114:     PORTBbits.RB5 = 1;
  1198     0272  1283               	bcf	3,5	;RP0=0, select bank0
  1199     0273  1303               	bcf	3,6	;RP1=0, select bank0
  1200     0274  1686               	bsf	6,5	;volatile
  1201     0275                     l948:
  1202                           
  1203                           ;main.c: 115:     _delay((unsigned long)((5)*(16000000/4000.0)));
  1204     0275  301A               	movlw	26
  1205     0276  00F2               	movwf	??_Flash+1
  1206     0277  30F8               	movlw	248
  1207     0278  00F1               	movwf	??_Flash
  1208     0279                     u417:
  1209     0279  0BF1               	decfsz	??_Flash,f
  1210     027A  2A79               	goto	u417
  1211     027B  0BF2               	decfsz	??_Flash+1,f
  1212     027C  2A79               	goto	u417
  1213     027D  0000               	nop
  1214     027E                     l950:
  1215                           
  1216                           ;main.c: 116:     PORTBbits.RB5 = 0;
  1217     027E  1283               	bcf	3,5	;RP0=0, select bank0
  1218     027F  1303               	bcf	3,6	;RP1=0, select bank0
  1219     0280  1286               	bcf	6,5	;volatile
  1220     0281                     l77:
  1221     0281  0008               	return
  1222     0282                     __end_of_Flash:
  1223     007E                     btemp	set	126	;btemp
  1224     007E                     wtemp0	set	126
  1225                           
  1226                           	psect	config
  1227                           
  1228                           ;Config register CONFIG @ 0x2007
  1229                           ;	Oscillator Selection bits
  1230                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
  1231                           ;	Watchdog Timer Enable bit
  1232                           ;	WDTE = OFF, WDT disabled
  1233                           ;	Power-up Timer Enable bit
  1234                           ;	PWRTE = ON, PWRT enabled
  1235                           ;	RA5/MCLR/VPP Pin Function Select bit
  1236                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD
  1237                           ;	Brown-out Detect Enable bit
  1238                           ;	BOREN = ON, BOD enabled
  1239                           ;	Low-Voltage Programming Enable bit
  1240                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  1241                           ;	Data EE Memory Code Protection bit
  1242                           ;	CPD = OFF, Data memory code protection off
  1243                           ;	Flash Program Memory Code Protection bit
  1244                           ;	CP = OFF, Code protection off
  1245     2007                     	org	8199
  1246     2007  3F50               	dw	16208

Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13     13      13
    BANK0            80     18      26
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    UART_transmit@CMD	PTR unsigned char  size(1) Largest target is 8
		 -> voldown_cmd(CODE[8]), volup_cmd(CODE[8]), pause_cmd(CODE[8]), volset_cmd(CODE[8]), 


Critical Paths under _main in COMMON

    _main->_init
    _init->_checkbit

Critical Paths under _main in BANK0

    _main->_UART_transmit

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    2045
                                             13 BANK0      5     5      0
                              _Flash
                      _UART_transmit
                               _init
                       _motor_switch
 ---------------------------------------------------------------------------------
 (1) _motor_switch                                         2     0      2     174
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _init                                                 4     4      0     415
                                              9 COMMON     4     4      0
                           _checkbit
 ---------------------------------------------------------------------------------
 (2) _checkbit                                             9     5      4     348
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _UART_transmit                                       18    15      3    1410
                                              0 COMMON     5     2      3
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (1) _Flash                                                2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Flash
   _UART_transmit
   _init
     _checkbit
   _motor_switch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            D      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               D      D       D       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     12      1A       3       32.5%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      27       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      27      10        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Mon Jan 15 23:40:46 2024

                      pc 0002                       l60 0370                       l55 02AE  
                     l65 0293                       l74 030D                       l90 03B9  
                     l59 0360                       l92 03BD                       l84 0393  
                     l77 0281                       l86 0399                       l96 03CD  
                     fsr 0004                      l100 03DD                      l900 036C  
                    l902 036D                      l910 0282                      l904 036E  
                    l912 0288                      l930 02DD                      l850 0294  
                    l906 036F                      l914 028F                      l940 02EF  
                    l932 02E5                      l924 02BD                      l916 02B2  
                    l860 0314                      l950 027E                      l942 02F8  
                    l926 02CA                      l918 02BB                      l870 031F  
                    l862 0315                      l854 030E                      l944 0300  
                    l928 02D0                      l880 032A                      l872 0320  
                    l864 0318                      l856 0312                      l960 0378  
                    l952 0371                      l946 0272                      l938 02E7  
                    l890 035D                      l882 0331                      l874 0321  
                    l866 0319                      l858 0313                      l970 03A3  
                    l962 037E                      l954 0372                      l948 0275  
                    l892 0363                      l884 033F                      l876 0324  
                    l868 031C                      l980 03C6                      l972 03A6  
                    l964 0386                      l894 0367                      l886 034C  
                    l878 0328                      l990 03D7                      l982 03C7  
                    l974 03B5                      l896 036A                      l888 034F  
                    l968 039D                      l898 036B                      l994 03E1  
                    l986 03D1                      l978 03C1                      l996 03E6  
                    l988 03D6                      l998 03E7                      u210 02AD  
                    u211 02AB                      u220 02AE                      u204 029E  
                    u300 0399                      u205 029B                      u301 0398  
                    u230 034C                      u310 039D                      u231 034B  
                    u311 039C                      u240 035D                      u320 03BD  
                    u241 035C                      u321 03BC                      u250 0288  
                    u330 03C1                      u251 0287                      u331 03C0  
                    u260 02B6                      u340 03CD                      u341 03CC  
                    u270 02DD                      u350 03D1                      _PR2 0092  
                    u407 02F3                      u271 02DC                      u351 03D0  
                    u280 030D                      u360 03DD                      u417 0279  
                    u281 030C                      u361 03DC                      u370 03E1  
                    u290 0393                      u275 02D9                      u371 03E0  
                    u291 0392                      u380 03ED                      u285 0309  
                    u381 03EC                      u295 038F                      u397 03AE  
                    fsr0 0004                      indf 0000                     l1000 03ED  
                   _main 0371                     _init 030E                     btemp 007E  
            _voldown_cmd 0010                     start 0001                    ?_main 0071  
                  ?_init 0071                    _T2CON 0012                    _SPBRG 0099  
                  _TXREG 0019                    _Flash 0272                    main@i 0030  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 03F4             __end_of_main 03F4             __end_of_init 0371  
                 ??_main 002D                   ??_init 007A                   ?_Flash 0071  
                 _CCPR1L 0015                   _TRISA0 0428                   _TRISA1 0429  
                 _TRISB0 0430                   _TRISB1 0431                   _TRISB2 0432  
                 _TRISB3 0433                   _TRISB4 0434                   _TRISA7 042F  
                 _TRISB5 0435                   _TRISB6 0436         __end_of_checkbit 02AF  
__end_of__initialization 03FE            __end_of_Flash 0282           __pcstackCOMMON 0071  
         init@duty_cycle 007C                  ??_Flash 0071               __pbssBANK0 0032  
  __end_of_UART_transmit 030E               __pmaintext 0371                ?_checkbit 0071  
             __stringtab 0002                _CMCONbits 001F         checkbit@position 0073  
                __ptext1 0282                  __ptext2 030E                  __ptext3 0294  
                __ptext4 02AF                  __ptext5 0272               ??_checkbit 0075  
      __end_of_pause_cmd 0028     end_of_initialization 03FE            ?_motor_switch 0071  
              _RCSTAbits 0018                _PORTAbits 0005                _PORTBbits 0006  
      __end_of_volup_cmd 0020           ??_motor_switch 0073    UART_transmit@feedback 0071  
            _CCP1CONbits 0017                _TXSTAbits 0098               _volset_cmd 0008  
    start_initialization 03F4                ___latbits 0000            __pcstackBANK0 0020  
           checkbit@data 0071     __end_of_motor_switch 0294       UART_transmit@i_227 0029  
              __pstrings 0002       UART_transmit@para1 0072       UART_transmit@para2 0073  
              _pause_cmd 0020           UART_transmit@i 002B              __stringbase 0007  
              _volup_cmd 0018            _UART_transmit 02AF       __end_of__stringtab 0008  
               _checkbit 0294        UART_transmit@F573 0032           ?_UART_transmit 0071  
           _motor_switch 0282         UART_transmit@CMD 0028         UART_transmit@cmd 0020  
              stringcode 0002            motor_switch@x 0071      __end_of_voldown_cmd 0018  
               stringdir 0002                 stringtab 0002       __end_of_volset_cmd 0010  
        ??_UART_transmit 0074  
