

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Jan 10 02:38:25 2024

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F627A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17     0000                     
    18                           ; Generated 22/03/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F627A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52     0000                     	;# 
    53     0001                     	;# 
    54     0002                     	;# 
    55     0003                     	;# 
    56     0004                     	;# 
    57     0005                     	;# 
    58     0006                     	;# 
    59     000A                     	;# 
    60     000B                     	;# 
    61     000C                     	;# 
    62     000E                     	;# 
    63     000E                     	;# 
    64     000F                     	;# 
    65     0010                     	;# 
    66     0011                     	;# 
    67     0012                     	;# 
    68     0015                     	;# 
    69     0015                     	;# 
    70     0016                     	;# 
    71     0017                     	;# 
    72     0018                     	;# 
    73     0019                     	;# 
    74     001A                     	;# 
    75     001F                     	;# 
    76     0081                     	;# 
    77     0085                     	;# 
    78     0086                     	;# 
    79     008C                     	;# 
    80     008E                     	;# 
    81     0092                     	;# 
    82     0098                     	;# 
    83     0099                     	;# 
    84     009A                     	;# 
    85     009B                     	;# 
    86     009C                     	;# 
    87     009D                     	;# 
    88     009F                     	;# 
    89     0000                     	;# 
    90     0001                     	;# 
    91     0002                     	;# 
    92     0003                     	;# 
    93     0004                     	;# 
    94     0005                     	;# 
    95     0006                     	;# 
    96     000A                     	;# 
    97     000B                     	;# 
    98     000C                     	;# 
    99     000E                     	;# 
   100     000E                     	;# 
   101     000F                     	;# 
   102     0010                     	;# 
   103     0011                     	;# 
   104     0012                     	;# 
   105     0015                     	;# 
   106     0015                     	;# 
   107     0016                     	;# 
   108     0017                     	;# 
   109     0018                     	;# 
   110     0019                     	;# 
   111     001A                     	;# 
   112     001F                     	;# 
   113     0081                     	;# 
   114     0085                     	;# 
   115     0086                     	;# 
   116     008C                     	;# 
   117     008E                     	;# 
   118     0092                     	;# 
   119     0098                     	;# 
   120     0099                     	;# 
   121     009A                     	;# 
   122     009B                     	;# 
   123     009C                     	;# 
   124     009D                     	;# 
   125     009F                     	;# 
   126                           
   127                           	psect	strings
   128     0001                     __pstrings:
   129     0001                     stringtab:
   130     0001                     __stringtab:
   131     0001                     stringcode:	
   132                           ;	String table - string pointers are 1 byte each
   133                           
   134     0001                     stringdir:
   135     0001  3000               	movlw	high stringdir
   136     0002  008A               	movwf	10
   137     0003  0804               	movf	4,w
   138     0004  0A84               	incf	4,f
   139     0005  0782               	addwf	2,f
   140     0006                     __stringbase:
   141     0006  3400               	retlw	0
   142     0007                     __end_of__stringtab:
   143     0007                     _volset_cmd:
   144     0007  347E               	retlw	126
   145     0008  34FF               	retlw	255
   146     0009  3406               	retlw	6
   147     000A  3406               	retlw	6
   148     000B  3400               	retlw	0
   149     000C  3400               	retlw	0
   150     000D  3400               	retlw	0
   151     000E  34EF               	retlw	239
   152     000F                     __end_of_volset_cmd:
   153     000F                     _voldown_cmd:
   154     000F  347E               	retlw	126
   155     0010  34FF               	retlw	255
   156     0011  3406               	retlw	6
   157     0012  3405               	retlw	5
   158     0013  3400               	retlw	0
   159     0014  3400               	retlw	0
   160     0015  3400               	retlw	0
   161     0016  34EF               	retlw	239
   162     0017                     __end_of_voldown_cmd:
   163     0017                     _volup_cmd:
   164     0017  347E               	retlw	126
   165     0018  34FF               	retlw	255
   166     0019  3406               	retlw	6
   167     001A  3404               	retlw	4
   168     001B  3400               	retlw	0
   169     001C  3400               	retlw	0
   170     001D  3400               	retlw	0
   171     001E  34EF               	retlw	239
   172     001F                     __end_of_volup_cmd:
   173     001F                     _pause_cmd:
   174     001F  347E               	retlw	126
   175     0020  34FF               	retlw	255
   176     0021  3406               	retlw	6
   177     0022  340E               	retlw	14
   178     0023  3400               	retlw	0
   179     0024  3400               	retlw	0
   180     0025  3400               	retlw	0
   181     0026  34EF               	retlw	239
   182     0027                     __end_of_pause_cmd:
   183     0005                     _PORTAbits	set	5
   184     0006                     _PORTBbits	set	6
   185     0019                     _TXREG	set	25
   186     0012                     _T2CON	set	18
   187     0017                     _CCP1CONbits	set	23
   188     0015                     _CCPR1L	set	21
   189     0018                     _RCSTAbits	set	24
   190     001F                     _CMCONbits	set	31
   191     0092                     _PR2	set	146
   192     0099                     _SPBRG	set	153
   193     0098                     _TXSTAbits	set	152
   194     0434                     _TRISB4	set	1076
   195     0436                     _TRISB6	set	1078
   196     0435                     _TRISB5	set	1077
   197     0430                     _TRISB0	set	1072
   198     042F                     _TRISA7	set	1071
   199     0429                     _TRISA1	set	1065
   200     0428                     _TRISA0	set	1064
   201     0433                     _TRISB3	set	1075
   202     0432                     _TRISB2	set	1074
   203     0431                     _TRISB1	set	1073
   204                           
   205                           	psect	cinit
   206     03F4                     start_initialization:	
   207                           ; #config settings
   208                           
   209     03F4                     __initialization:
   210                           
   211                           ; Clear objects allocated to BANK0
   212     03F4  1283               	bcf	3,5	;RP0=0, select bank0
   213     03F5  1303               	bcf	3,6	;RP1=0, select bank0
   214     03F6  01AD               	clrf	__pbssBANK0& (0+127)
   215     03F7  01AE               	clrf	(__pbssBANK0+1)& (0+127)
   216     03F8  01AF               	clrf	(__pbssBANK0+2)& (0+127)
   217     03F9  01B0               	clrf	(__pbssBANK0+3)& (0+127)
   218     03FA  01B1               	clrf	(__pbssBANK0+4)& (0+127)
   219     03FB  01B2               	clrf	(__pbssBANK0+5)& (0+127)
   220     03FC  01B3               	clrf	(__pbssBANK0+6)& (0+127)
   221     03FD  01B4               	clrf	(__pbssBANK0+7)& (0+127)
   222     03FE                     end_of_initialization:	
   223                           ;End of C runtime variable initialization code
   224                           
   225     03FE                     __end_of__initialization:
   226     03FE  0183               	clrf	3
   227     03FF  2B46               	ljmp	_main	;jump to C main() function
   228                           
   229                           	psect	bssBANK0
   230     002D                     __pbssBANK0:
   231     002D                     UART_transmit@F573:
   232     002D                     	ds	8
   233                           
   234                           	psect	cstackCOMMON
   235     0070                     __pcstackCOMMON:
   236     0070                     ?_checkbit:
   237     0070                     ?_init:	
   238                           ; 1 bytes @ 0x0
   239                           
   240     0070                     ?_motor_switch:	
   241                           ; 1 bytes @ 0x0
   242                           
   243     0070                     ?_UART_transmit:	
   244                           ; 1 bytes @ 0x0
   245                           
   246     0070                     ?_Flash:	
   247                           ; 1 bytes @ 0x0
   248                           
   249     0070                     ??_Flash:	
   250                           ; 1 bytes @ 0x0
   251                           
   252     0070                     ?_main:	
   253                           ; 1 bytes @ 0x0
   254                           
   255     0070                     UART_transmit@feedback:	
   256                           ; 1 bytes @ 0x0
   257                           
   258     0070                     checkbit@data:	
   259                           ; 1 bytes @ 0x0
   260                           
   261     0070                     motor_switch@x:	
   262                           ; 2 bytes @ 0x0
   263                           
   264                           
   265                           ; 2 bytes @ 0x0
   266     0070                     	ds	1
   267     0071                     UART_transmit@para1:
   268                           
   269                           ; 1 bytes @ 0x1
   270     0071                     	ds	1
   271     0072                     ??_motor_switch:
   272     0072                     UART_transmit@para2:	
   273                           ; 1 bytes @ 0x2
   274                           
   275     0072                     checkbit@position:	
   276                           ; 1 bytes @ 0x2
   277                           
   278                           
   279                           ; 2 bytes @ 0x2
   280     0072                     	ds	1
   281     0073                     ??_UART_transmit:
   282                           
   283                           ; 1 bytes @ 0x3
   284     0073                     	ds	1
   285     0074                     ??_checkbit:
   286                           
   287                           ; 1 bytes @ 0x4
   288     0074                     	ds	5
   289     0079                     ??_init:
   290     0079                     ??_main:	
   291                           ; 1 bytes @ 0x9
   292                           
   293                           
   294                           ; 1 bytes @ 0x9
   295     0079                     	ds	3
   296     007C                     main@i:
   297                           
   298                           ; 2 bytes @ 0xC
   299     007C                     	ds	2
   300                           
   301                           	psect	cstackBANK0
   302     0020                     __pcstackBANK0:
   303     0020                     UART_transmit@cmd:
   304                           
   305                           ; 8 bytes @ 0x0
   306     0020                     	ds	8
   307     0028                     UART_transmit@CMD:
   308                           
   309                           ; 1 bytes @ 0x8
   310     0028                     	ds	1
   311     0029                     UART_transmit@i_227:
   312                           
   313                           ; 2 bytes @ 0x9
   314     0029                     	ds	2
   315     002B                     UART_transmit@i:
   316                           
   317                           ; 2 bytes @ 0xB
   318     002B                     	ds	2
   319                           
   320                           	psect	maintext
   321     0346                     __pmaintext:	
   322 ;;
   323 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   324 ;;
   325 ;; *************** function _main *****************
   326 ;; Defined at:
   327 ;;		line 120 in file "main.c"
   328 ;; Parameters:    Size  Location     Type
   329 ;;		None
   330 ;; Auto vars:     Size  Location     Type
   331 ;;  i               2   12[COMMON] int 
   332 ;; Return value:  Size  Location     Type
   333 ;;                  1    wreg      void 
   334 ;; Registers used:
   335 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   336 ;; Tracked objects:
   337 ;;		On entry : B00/0
   338 ;;		On exit  : 0/0
   339 ;;		Unchanged: 0/0
   340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   341 ;;      Params:         0       0       0       0
   342 ;;      Locals:         2       0       0       0
   343 ;;      Temps:          3       0       0       0
   344 ;;      Totals:         5       0       0       0
   345 ;;Total ram usage:        5 bytes
   346 ;; Hardware stack levels required when called: 2
   347 ;; This function calls:
   348 ;;		_Flash
   349 ;;		_UART_transmit
   350 ;;		_init
   351 ;;		_motor_switch
   352 ;; This function is called by:
   353 ;;		Startup code after reset
   354 ;; This function uses a non-reentrant model
   355 ;;
   356                           
   357     0346                     _main:	
   358                           ;psect for function _main
   359                           
   360     0346                     l956:	
   361                           ;incstack = 0
   362                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   363                           
   364                           
   365                           ;main.c: 122:     init();
   366     0346  2298               	fcall	_init
   367     0347                     l958:
   368                           
   369                           ;main.c: 123:     for (int i = 1; i < 5; i++){
   370     0347  3001               	movlw	1
   371     0348  00FC               	movwf	main@i
   372     0349  3000               	movlw	0
   373     034A  00FD               	movwf	main@i+1
   374     034B                     l964:
   375                           
   376                           ;main.c: 124:         UART_transmit(volset_cmd, 0x00, 0x00, 0x14);
   377     034B  01F0               	clrf	UART_transmit@feedback
   378     034C  01F1               	clrf	UART_transmit@para1
   379     034D  3014               	movlw	20
   380     034E  00F2               	movwf	UART_transmit@para2
   381     034F  3001               	movlw	(low ((_volset_cmd-__stringbase)| (0+32768)))& (0+255)
   382     0350  22E7               	fcall	_UART_transmit
   383     0351                     l966:
   384                           
   385                           ;main.c: 125:     };
   386     0351  3001               	movlw	1
   387     0352  07FC               	addwf	main@i,f
   388     0353  1803               	skipnc
   389     0354  0AFD               	incf	main@i+1,f
   390     0355  3000               	movlw	0
   391     0356  07FD               	addwf	main@i+1,f
   392     0357                     l968:
   393     0357  087D               	movf	main@i+1,w
   394     0358  3A80               	xorlw	128
   395     0359  00FF               	movwf	btemp+1
   396     035A  3080               	movlw	128
   397     035B  027F               	subwf	btemp+1,w
   398     035C  1D03               	skipz
   399     035D  2B60               	goto	u295
   400     035E  3005               	movlw	5
   401     035F  027C               	subwf	main@i,w
   402     0360                     u295:
   403     0360  1C03               	skipc
   404     0361  2B63               	goto	u291
   405     0362  2B64               	goto	u290
   406     0363                     u291:
   407     0363  2B4B               	goto	l964
   408     0364                     u290:
   409     0364                     l84:	
   410                           ;main.c: 127:     while(1){
   411                           
   412                           
   413                           ;main.c: 128:         if (PORTAbits.RA0){
   414     0364  1283               	bcf	3,5	;RP0=0, select bank0
   415     0365  1303               	bcf	3,6	;RP1=0, select bank0
   416     0366  1C05               	btfss	5,0	;volatile
   417     0367  2B69               	goto	u301
   418     0368  2B6A               	goto	u300
   419     0369                     u301:
   420     0369  2B64               	goto	l84
   421     036A                     u300:
   422     036A                     l86:
   423     036A  1805               	btfsc	5,0	;volatile
   424     036B  2B6D               	goto	u311
   425     036C  2B6E               	goto	u310
   426     036D                     u311:
   427     036D  2B6A               	goto	l86
   428     036E                     u310:
   429     036E                     l972:
   430                           
   431                           ;main.c: 130:             motor_switch(1);
   432     036E  3001               	movlw	1
   433     036F  00F0               	movwf	motor_switch@x
   434     0370  3000               	movlw	0
   435     0371  00F1               	movwf	motor_switch@x+1
   436     0372  226B               	fcall	_motor_switch
   437     0373                     l974:
   438                           
   439                           ;main.c: 131:             _delay((unsigned long)((700)*(16000000/4000.0)));
   440     0373  300F               	movlw	15
   441     0374  00FB               	movwf	??_main+2
   442     0375  3035               	movlw	53
   443     0376  00FA               	movwf	??_main+1
   444     0377  3051               	movlw	81
   445     0378  00F9               	movwf	??_main
   446     0379                     u397:
   447     0379  0BF9               	decfsz	??_main,f
   448     037A  2B79               	goto	u397
   449     037B  0BFA               	decfsz	??_main+1,f
   450     037C  2B79               	goto	u397
   451     037D  0BFB               	decfsz	??_main+2,f
   452     037E  2B79               	goto	u397
   453     037F                     l976:
   454                           
   455                           ;main.c: 132:             PORTAbits.RA1 = 1;
   456     037F  1283               	bcf	3,5	;RP0=0, select bank0
   457     0380  1303               	bcf	3,6	;RP1=0, select bank0
   458     0381  1485               	bsf	5,1	;volatile
   459     0382                     l978:
   460                           
   461                           ;main.c: 133:             _delay((unsigned long)((5)*(16000000/4000.0)));
   462     0382  301A               	movlw	26
   463     0383  00FA               	movwf	??_main+1
   464     0384  30F8               	movlw	248
   465     0385  00F9               	movwf	??_main
   466     0386                     u407:
   467     0386  0BF9               	decfsz	??_main,f
   468     0387  2B86               	goto	u407
   469     0388  0BFA               	decfsz	??_main+1,f
   470     0389  2B86               	goto	u407
   471     038A  0000               	nop
   472     038B                     l980:
   473                           
   474                           ;main.c: 134:             PORTAbits.RA1 = 0;
   475     038B  1283               	bcf	3,5	;RP0=0, select bank0
   476     038C  1303               	bcf	3,6	;RP1=0, select bank0
   477     038D  1085               	bcf	5,1	;volatile
   478     038E                     l982:
   479                           
   480                           ;main.c: 135:             _delay((unsigned long)((500)*(16000000/4000.0)));
   481     038E  300B               	movlw	11
   482     038F  00FB               	movwf	??_main+2
   483     0390  3026               	movlw	38
   484     0391  00FA               	movwf	??_main+1
   485     0392  305D               	movlw	93
   486     0393  00F9               	movwf	??_main
   487     0394                     u417:
   488     0394  0BF9               	decfsz	??_main,f
   489     0395  2B94               	goto	u417
   490     0396  0BFA               	decfsz	??_main+1,f
   491     0397  2B94               	goto	u417
   492     0398  0BFB               	decfsz	??_main+2,f
   493     0399  2B94               	goto	u417
   494     039A  2B9B               	nop2
   495                           
   496                           ;main.c: 136:             while(!PORTAbits.RA7){
   497     039B  2BDB               	goto	l1010
   498     039C                     l90:
   499                           
   500                           ;main.c: 137:                 if (PORTBbits.RB0){
   501     039C  1C06               	btfss	6,0	;volatile
   502     039D  2B9F               	goto	u321
   503     039E  2BA0               	goto	u320
   504     039F                     u321:
   505     039F  2BBB               	goto	l994
   506     03A0                     u320:
   507     03A0                     l92:
   508     03A0  1806               	btfsc	6,0	;volatile
   509     03A1  2BA3               	goto	u331
   510     03A2  2BA4               	goto	u330
   511     03A3                     u331:
   512     03A3  2BA0               	goto	l92
   513     03A4                     u330:
   514     03A4                     l986:
   515                           
   516                           ;main.c: 139:                     UART_transmit(pause_cmd, 0x00, 0x00, 0x00);
   517     03A4  01F0               	clrf	UART_transmit@feedback
   518     03A5  01F1               	clrf	UART_transmit@para1
   519     03A6  01F2               	clrf	UART_transmit@para2
   520     03A7  3019               	movlw	(low ((_pause_cmd-__stringbase)| (0+32768)))& (0+255)
   521     03A8  22E7               	fcall	_UART_transmit
   522     03A9                     l988:
   523                           
   524                           ;main.c: 140:                     _delay((unsigned long)((500)*(16000000/4000.0)));
   525     03A9  300B               	movlw	11
   526     03AA  00FB               	movwf	??_main+2
   527     03AB  3026               	movlw	38
   528     03AC  00FA               	movwf	??_main+1
   529     03AD  305D               	movlw	93
   530     03AE  00F9               	movwf	??_main
   531     03AF                     u427:
   532     03AF  0BF9               	decfsz	??_main,f
   533     03B0  2BAF               	goto	u427
   534     03B1  0BFA               	decfsz	??_main+1,f
   535     03B2  2BAF               	goto	u427
   536     03B3  0BFB               	decfsz	??_main+2,f
   537     03B4  2BAF               	goto	u427
   538     03B5  2BB6               	nop2
   539     03B6                     l990:
   540                           
   541                           ;main.c: 141:                     motor_switch(0);
   542     03B6  3000               	movlw	0
   543     03B7  00F0               	movwf	motor_switch@x
   544     03B8  00F1               	movwf	motor_switch@x+1
   545     03B9  226B               	fcall	_motor_switch
   546     03BA                     l992:
   547                           
   548                           ;main.c: 142:                     Flash();
   549     03BA  225B               	fcall	_Flash
   550     03BB                     l994:
   551                           
   552                           ;main.c: 144:                 if (PORTBbits.RB6){
   553     03BB  1283               	bcf	3,5	;RP0=0, select bank0
   554     03BC  1303               	bcf	3,6	;RP1=0, select bank0
   555     03BD  1F06               	btfss	6,6	;volatile
   556     03BE  2BC0               	goto	u341
   557     03BF  2BC1               	goto	u340
   558     03C0                     u341:
   559     03C0  2BCB               	goto	l1002
   560     03C1                     u340:
   561     03C1                     l96:
   562     03C1  1B06               	btfsc	6,6	;volatile
   563     03C2  2BC4               	goto	u351
   564     03C3  2BC5               	goto	u350
   565     03C4                     u351:
   566     03C4  2BC1               	goto	l96
   567     03C5                     u350:
   568     03C5                     l998:
   569                           
   570                           ;main.c: 146:                     UART_transmit(volup_cmd, 0x00, 0x00, 0x00);
   571     03C5  01F0               	clrf	UART_transmit@feedback
   572     03C6  01F1               	clrf	UART_transmit@para1
   573     03C7  01F2               	clrf	UART_transmit@para2
   574     03C8  3011               	movlw	(low ((_volup_cmd-__stringbase)| (0+32768)))& (0+255)
   575     03C9  22E7               	fcall	_UART_transmit
   576     03CA                     l1000:
   577                           
   578                           ;main.c: 148:                     Flash();
   579     03CA  225B               	fcall	_Flash
   580     03CB                     l1002:
   581                           
   582                           ;main.c: 150:                 if (PORTBbits.RB4){
   583     03CB  1283               	bcf	3,5	;RP0=0, select bank0
   584     03CC  1303               	bcf	3,6	;RP1=0, select bank0
   585     03CD  1E06               	btfss	6,4	;volatile
   586     03CE  2BD0               	goto	u361
   587     03CF  2BD1               	goto	u360
   588     03D0                     u361:
   589     03D0  2BDB               	goto	l1010
   590     03D1                     u360:
   591     03D1                     l100:
   592     03D1  1A06               	btfsc	6,4	;volatile
   593     03D2  2BD4               	goto	u371
   594     03D3  2BD5               	goto	u370
   595     03D4                     u371:
   596     03D4  2BD1               	goto	l100
   597     03D5                     u370:
   598     03D5                     l1006:
   599                           
   600                           ;main.c: 152:                     UART_transmit(voldown_cmd, 0x00, 0x00, 0x00);
   601     03D5  01F0               	clrf	UART_transmit@feedback
   602     03D6  01F1               	clrf	UART_transmit@para1
   603     03D7  01F2               	clrf	UART_transmit@para2
   604     03D8  3009               	movlw	(low ((_voldown_cmd-__stringbase)| (0+32768)))& (0+255)
   605     03D9  22E7               	fcall	_UART_transmit
   606     03DA                     l1008:
   607                           
   608                           ;main.c: 153:                     Flash();
   609     03DA  225B               	fcall	_Flash
   610     03DB                     l1010:
   611                           
   612                           ;main.c: 136:             while(!PORTAbits.RA7){
   613     03DB  1283               	bcf	3,5	;RP0=0, select bank0
   614     03DC  1303               	bcf	3,6	;RP1=0, select bank0
   615     03DD  1F85               	btfss	5,7	;volatile
   616     03DE  2BE0               	goto	u381
   617     03DF  2BE1               	goto	u380
   618     03E0                     u381:
   619     03E0  2B9C               	goto	l90
   620     03E1                     u380:
   621     03E1                     l1012:
   622                           
   623                           ;main.c: 157:              _delay((unsigned long)((500)*(16000000/4000.0)));
   624     03E1  300B               	movlw	11
   625     03E2  00FB               	movwf	??_main+2
   626     03E3  3026               	movlw	38
   627     03E4  00FA               	movwf	??_main+1
   628     03E5  305D               	movlw	93
   629     03E6  00F9               	movwf	??_main
   630     03E7                     u437:
   631     03E7  0BF9               	decfsz	??_main,f
   632     03E8  2BE7               	goto	u437
   633     03E9  0BFA               	decfsz	??_main+1,f
   634     03EA  2BE7               	goto	u437
   635     03EB  0BFB               	decfsz	??_main+2,f
   636     03EC  2BE7               	goto	u437
   637     03ED  2BEE               	nop2
   638     03EE                     l1014:
   639                           
   640                           ;main.c: 158:             motor_switch(0);
   641     03EE  3000               	movlw	0
   642     03EF  00F0               	movwf	motor_switch@x
   643     03F0  00F1               	movwf	motor_switch@x+1
   644     03F1  226B               	fcall	_motor_switch
   645     03F2  2B64               	goto	l84
   646     03F3  2800               	ljmp	start
   647     03F4                     __end_of_main:
   648                           
   649                           	psect	text1
   650     026B                     __ptext1:	
   651 ;; *************** function _motor_switch *****************
   652 ;; Defined at:
   653 ;;		line 88 in file "main.c"
   654 ;; Parameters:    Size  Location     Type
   655 ;;  x               2    0[COMMON] int 
   656 ;; Auto vars:     Size  Location     Type
   657 ;;		None
   658 ;; Return value:  Size  Location     Type
   659 ;;                  1    wreg      void 
   660 ;; Registers used:
   661 ;;		wreg, status,2, status,0
   662 ;; Tracked objects:
   663 ;;		On entry : 0/0
   664 ;;		On exit  : 0/0
   665 ;;		Unchanged: 0/0
   666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   667 ;;      Params:         2       0       0       0
   668 ;;      Locals:         0       0       0       0
   669 ;;      Temps:          0       0       0       0
   670 ;;      Totals:         2       0       0       0
   671 ;;Total ram usage:        2 bytes
   672 ;; Hardware stack levels used: 1
   673 ;; This function calls:
   674 ;;		Nothing
   675 ;; This function is called by:
   676 ;;		_main
   677 ;; This function uses a non-reentrant model
   678 ;;
   679                           
   680     026B                     _motor_switch:	
   681                           ;psect for function _motor_switch
   682                           
   683     026B                     l920:	
   684                           ;incstack = 0
   685                           ; Regs used in _motor_switch: [wreg+status,2+status,0]
   686                           
   687                           
   688                           ;main.c: 89:     if (x){
   689     026B  0870               	movf	motor_switch@x,w
   690     026C  0471               	iorwf	motor_switch@x+1,w
   691     026D  1903               	btfsc	3,2
   692     026E  2A70               	goto	u251
   693     026F  2A71               	goto	u250
   694     0270                     u251:
   695     0270  2A78               	goto	l924
   696     0271                     u250:
   697     0271                     l922:
   698                           
   699                           ;main.c: 90:         CCP1CONbits.CCP1M = 0b1100;
   700     0271  1283               	bcf	3,5	;RP0=0, select bank0
   701     0272  1303               	bcf	3,6	;RP1=0, select bank0
   702     0273  0817               	movf	23,w	;volatile
   703     0274  39F0               	andlw	-16
   704     0275  380C               	iorlw	12
   705     0276  0097               	movwf	23	;volatile
   706                           
   707                           ;main.c: 91:     }
   708     0277  2A7C               	goto	l65
   709     0278                     l924:
   710                           
   711                           ;main.c: 93:         CCP1CONbits.CCP1M = 0b0000;
   712     0278  30F0               	movlw	-16
   713     0279  1283               	bcf	3,5	;RP0=0, select bank0
   714     027A  1303               	bcf	3,6	;RP1=0, select bank0
   715     027B  0597               	andwf	23,f	;volatile
   716     027C                     l65:
   717     027C  0008               	return
   718     027D                     __end_of_motor_switch:
   719                           
   720                           	psect	text2
   721     0298                     __ptext2:	
   722 ;; *************** function _init *****************
   723 ;; Defined at:
   724 ;;		line 40 in file "main.c"
   725 ;; Parameters:    Size  Location     Type
   726 ;;		None
   727 ;; Auto vars:     Size  Location     Type
   728 ;;  duty_cycle      2    0        unsigned int 
   729 ;; Return value:  Size  Location     Type
   730 ;;                  1    wreg      void 
   731 ;; Registers used:
   732 ;;		wreg, status,2, status,0, pclath, cstack
   733 ;; Tracked objects:
   734 ;;		On entry : 0/0
   735 ;;		On exit  : 0/0
   736 ;;		Unchanged: 0/0
   737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   738 ;;      Params:         0       0       0       0
   739 ;;      Locals:         0       0       0       0
   740 ;;      Temps:          0       0       0       0
   741 ;;      Totals:         0       0       0       0
   742 ;;Total ram usage:        0 bytes
   743 ;; Hardware stack levels used: 1
   744 ;; Hardware stack levels required when called: 1
   745 ;; This function calls:
   746 ;;		_checkbit
   747 ;; This function is called by:
   748 ;;		_main
   749 ;; This function uses a non-reentrant model
   750 ;;
   751                           
   752     0298                     _init:	
   753                           ;psect for function _init
   754                           
   755     0298                     l864:	
   756                           ;incstack = 0
   757                           ; Regs used in _init: [wreg+status,2+status,0+pclath+cstack]
   758                           
   759                           
   760                           ;main.c: 42:     CMCONbits.CM = 0b111;
   761     0298  3007               	movlw	7
   762     0299  1283               	bcf	3,5	;RP0=0, select bank0
   763     029A  1303               	bcf	3,6	;RP1=0, select bank0
   764     029B  049F               	iorwf	31,f	;volatile
   765     029C                     l866:
   766                           
   767                           ;main.c: 43:     CMCONbits.CIS = 0;
   768     029C  119F               	bcf	31,3	;volatile
   769     029D                     l868:
   770                           
   771                           ;main.c: 44:     CMCONbits.C1INV = 0;
   772     029D  121F               	bcf	31,4	;volatile
   773     029E                     l870:
   774                           
   775                           ;main.c: 45:     CMCONbits.C2INV = 0;
   776     029E  129F               	bcf	31,5	;volatile
   777     029F                     l872:
   778                           
   779                           ;main.c: 48:     TRISB1 = 1;
   780     029F  1683               	bsf	3,5	;RP0=1, select bank1
   781     02A0  1303               	bcf	3,6	;RP1=0, select bank1
   782     02A1  1486               	bsf	6,1	;volatile
   783     02A2                     l874:
   784                           
   785                           ;main.c: 49:     TRISB2 = 0;
   786     02A2  1106               	bcf	6,2	;volatile
   787     02A3                     l876:
   788                           
   789                           ;main.c: 50:     RCSTAbits.SPEN = 1;
   790     02A3  1283               	bcf	3,5	;RP0=0, select bank0
   791     02A4  1303               	bcf	3,6	;RP1=0, select bank0
   792     02A5  1798               	bsf	24,7	;volatile
   793     02A6                     l878:
   794                           
   795                           ;main.c: 52:     TXSTAbits.SYNC = 0;
   796     02A6  1683               	bsf	3,5	;RP0=1, select bank1
   797     02A7  1303               	bcf	3,6	;RP1=0, select bank1
   798     02A8  1218               	bcf	24,4	;volatile
   799     02A9                     l880:
   800                           
   801                           ;main.c: 53:     TXSTAbits.BRGH = 1;
   802     02A9  1518               	bsf	24,2	;volatile
   803     02AA                     l882:
   804                           
   805                           ;main.c: 55:     TXSTAbits.TXEN = 1;
   806     02AA  1698               	bsf	24,5	;volatile
   807     02AB                     l884:
   808                           
   809                           ;main.c: 56:     RCSTAbits.CREN = 0;
   810     02AB  1283               	bcf	3,5	;RP0=0, select bank0
   811     02AC  1303               	bcf	3,6	;RP1=0, select bank0
   812     02AD  1218               	bcf	24,4	;volatile
   813     02AE                     l886:
   814                           
   815                           ;main.c: 59:     SPBRG = 25;
   816     02AE  3019               	movlw	25
   817     02AF  1683               	bsf	3,5	;RP0=1, select bank1
   818     02B0  1303               	bcf	3,6	;RP1=0, select bank1
   819     02B1  0099               	movwf	25	;volatile
   820     02B2                     l888:
   821                           
   822                           ;main.c: 63:     PR2 = (uint8_t)((1/(4*16000000*16))-1);
   823     02B2  30FF               	movlw	255
   824     02B3  0092               	movwf	18	;volatile
   825     02B4                     l890:
   826     02B4                     l892:
   827                           
   828                           ;main.c: 65:     CCPR1L = duty_cycle >> 2;
   829     02B4  1283               	bcf	3,5	;RP0=0, select bank0
   830     02B5  1303               	bcf	3,6	;RP1=0, select bank0
   831     02B6  0195               	clrf	21	;volatile
   832     02B7                     l894:
   833                           
   834                           ;main.c: 67:     if (checkbit(duty_cycle, 0)){
   835     02B7  3000               	movlw	0
   836     02B8  00F0               	movwf	checkbit@data
   837     02B9  00F1               	movwf	checkbit@data+1
   838     02BA  3000               	movlw	0
   839     02BB  00F2               	movwf	checkbit@position
   840     02BC  00F3               	movwf	checkbit@position+1
   841     02BD  227D               	fcall	_checkbit
   842     02BE  3A00               	xorlw	0
   843     02BF  1903               	skipnz
   844     02C0  2AC2               	goto	u231
   845     02C1  2AC3               	goto	u230
   846     02C2                     u231:
   847     02C2  2AC6               	goto	l898
   848     02C3                     u230:
   849     02C3                     l896:
   850                           
   851                           ;main.c: 68:         CCP1CONbits.CCP1Y = 1;
   852     02C3  1283               	bcf	3,5	;RP0=0, select bank0
   853     02C4  1303               	bcf	3,6	;RP1=0, select bank0
   854     02C5  1617               	bsf	23,4	;volatile
   855     02C6                     l898:
   856                           
   857                           ;main.c: 70:     if (checkbit(duty_cycle, 1)){
   858     02C6  3000               	movlw	0
   859     02C7  00F0               	movwf	checkbit@data
   860     02C8  00F1               	movwf	checkbit@data+1
   861     02C9  3001               	movlw	1
   862     02CA  00F2               	movwf	checkbit@position
   863     02CB  3000               	movlw	0
   864     02CC  00F3               	movwf	checkbit@position+1
   865     02CD  227D               	fcall	_checkbit
   866     02CE  3A00               	xorlw	0
   867     02CF  1903               	skipnz
   868     02D0  2AD2               	goto	u241
   869     02D1  2AD3               	goto	u240
   870     02D2                     u241:
   871     02D2  2AD6               	goto	l59
   872     02D3                     u240:
   873     02D3                     l900:
   874                           
   875                           ;main.c: 71:         CCP1CONbits.CCP1X = 1;
   876     02D3  1283               	bcf	3,5	;RP0=0, select bank0
   877     02D4  1303               	bcf	3,6	;RP1=0, select bank0
   878     02D5  1697               	bsf	23,5	;volatile
   879     02D6                     l59:	
   880                           ;main.c: 72:     };
   881                           
   882                           
   883                           ;main.c: 73:     TRISB3 = 0;
   884     02D6  1683               	bsf	3,5	;RP0=1, select bank1
   885     02D7  1303               	bcf	3,6	;RP1=0, select bank1
   886     02D8  1186               	bcf	6,3	;volatile
   887     02D9                     l902:
   888                           
   889                           ;main.c: 74:     T2CON = 0b00000110;
   890     02D9  3006               	movlw	6
   891     02DA  1283               	bcf	3,5	;RP0=0, select bank0
   892     02DB  1303               	bcf	3,6	;RP1=0, select bank0
   893     02DC  0092               	movwf	18	;volatile
   894     02DD                     l904:
   895                           
   896                           ;main.c: 78:     TRISA0 = 1;
   897     02DD  1683               	bsf	3,5	;RP0=1, select bank1
   898     02DE  1303               	bcf	3,6	;RP1=0, select bank1
   899     02DF  1405               	bsf	5,0	;volatile
   900     02E0                     l906:
   901                           
   902                           ;main.c: 79:     TRISA1 = 0;
   903     02E0  1085               	bcf	5,1	;volatile
   904     02E1                     l908:
   905                           
   906                           ;main.c: 80:     TRISA7 = 1;
   907     02E1  1785               	bsf	5,7	;volatile
   908     02E2                     l910:
   909                           
   910                           ;main.c: 81:     TRISB0 = 1;
   911     02E2  1406               	bsf	6,0	;volatile
   912     02E3                     l912:
   913                           
   914                           ;main.c: 82:     TRISB5 = 0;
   915     02E3  1286               	bcf	6,5	;volatile
   916     02E4                     l914:
   917                           
   918                           ;main.c: 83:     TRISB6 = 1;
   919     02E4  1706               	bsf	6,6	;volatile
   920     02E5                     l916:
   921                           
   922                           ;main.c: 84:     TRISB4 = 1;
   923     02E5  1606               	bsf	6,4	;volatile
   924     02E6                     l60:
   925     02E6  0008               	return
   926     02E7                     __end_of_init:
   927                           
   928                           	psect	text3
   929     027D                     __ptext3:	
   930 ;; *************** function _checkbit *****************
   931 ;; Defined at:
   932 ;;		line 36 in file "main.c"
   933 ;; Parameters:    Size  Location     Type
   934 ;;  data            2    0[COMMON] unsigned int 
   935 ;;  position        2    2[COMMON] int 
   936 ;; Auto vars:     Size  Location     Type
   937 ;;		None
   938 ;; Return value:  Size  Location     Type
   939 ;;                  1    wreg      _Bool 
   940 ;; Registers used:
   941 ;;		wreg, status,2, status,0
   942 ;; Tracked objects:
   943 ;;		On entry : 0/0
   944 ;;		On exit  : 0/0
   945 ;;		Unchanged: 0/0
   946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   947 ;;      Params:         4       0       0       0
   948 ;;      Locals:         0       0       0       0
   949 ;;      Temps:          5       0       0       0
   950 ;;      Totals:         9       0       0       0
   951 ;;Total ram usage:        9 bytes
   952 ;; Hardware stack levels used: 1
   953 ;; This function calls:
   954 ;;		Nothing
   955 ;; This function is called by:
   956 ;;		_init
   957 ;; This function uses a non-reentrant model
   958 ;;
   959                           
   960     027D                     _checkbit:	
   961                           ;psect for function _checkbit
   962                           
   963     027D                     l860:	
   964                           ;incstack = 0
   965                           ; Regs used in _checkbit: [wreg+status,2+status,0]
   966                           
   967                           
   968                           ;main.c: 37:     return data & (1 << position);
   969     027D  0A72               	incf	checkbit@position,w
   970     027E  00F4               	movwf	??_checkbit
   971     027F  3001               	movlw	1
   972     0280  00F5               	movwf	??_checkbit+1
   973     0281  3000               	movlw	0
   974     0282  00F6               	movwf	??_checkbit+2
   975     0283  2A87               	goto	u204
   976     0284                     u205:
   977     0284  1003               	clrc
   978     0285  0DF5               	rlf	??_checkbit+1,f
   979     0286  0DF6               	rlf	??_checkbit+2,f
   980     0287                     u204:
   981     0287  0BF4               	decfsz	??_checkbit,f
   982     0288  2A84               	goto	u205
   983     0289  0870               	movf	checkbit@data,w
   984     028A  0575               	andwf	??_checkbit+1,w
   985     028B  00F7               	movwf	??_checkbit+3
   986     028C  0871               	movf	checkbit@data+1,w
   987     028D  0576               	andwf	??_checkbit+2,w
   988     028E  00F8               	movwf	??_checkbit+4
   989     028F  0877               	movf	??_checkbit+3,w
   990     0290  0478               	iorwf	??_checkbit+4,w
   991     0291  1D03               	btfss	3,2
   992     0292  2A94               	goto	u211
   993     0293  2A96               	goto	u210
   994     0294                     u211:
   995     0294  3001               	movlw	1
   996     0295  2A97               	goto	u220
   997     0296                     u210:
   998     0296  3000               	movlw	0
   999     0297                     u220:
  1000     0297                     l55:
  1001     0297  0008               	return
  1002     0298                     __end_of_checkbit:
  1003                           
  1004                           	psect	text4
  1005     02E7                     __ptext4:	
  1006 ;; *************** function _UART_transmit *****************
  1007 ;; Defined at:
  1008 ;;		line 96 in file "main.c"
  1009 ;; Parameters:    Size  Location     Type
  1010 ;;  CMD             1    wreg     PTR unsigned char 
  1011 ;;		 -> voldown_cmd(8), volup_cmd(8), pause_cmd(8), volset_cmd(8), 
  1012 ;;  feedback        1    0[COMMON] unsigned char 
  1013 ;;  para1           1    1[COMMON] unsigned char 
  1014 ;;  para2           1    2[COMMON] unsigned char 
  1015 ;; Auto vars:     Size  Location     Type
  1016 ;;  CMD             1    8[BANK0 ] PTR unsigned char 
  1017 ;;		 -> voldown_cmd(8), volup_cmd(8), pause_cmd(8), volset_cmd(8), 
  1018 ;;  i               2    9[BANK0 ] int 
  1019 ;;  i               2   11[BANK0 ] int 
  1020 ;;  cmd             8    0[BANK0 ] unsigned char [8]
  1021 ;; Return value:  Size  Location     Type
  1022 ;;                  1    wreg      void 
  1023 ;; Registers used:
  1024 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  1025 ;; Tracked objects:
  1026 ;;		On entry : 0/0
  1027 ;;		On exit  : 0/0
  1028 ;;		Unchanged: 0/0
  1029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1030 ;;      Params:         3       0       0       0
  1031 ;;      Locals:         0      13       0       0
  1032 ;;      Temps:          2       0       0       0
  1033 ;;      Totals:         5      13       0       0
  1034 ;;Total ram usage:       18 bytes
  1035 ;; Hardware stack levels used: 2
  1036 ;; This function calls:
  1037 ;;		Nothing
  1038 ;; This function is called by:
  1039 ;;		_main
  1040 ;; This function uses a non-reentrant model
  1041 ;;
  1042                           
  1043     02E7                     _UART_transmit:	
  1044                           ;psect for function _UART_transmit
  1045                           
  1046                           
  1047                           ;incstack = 0
  1048                           ; Regs used in _UART_transmit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  1049                           ;UART_transmit@CMD stored from wreg
  1050     02E7  1283               	bcf	3,5	;RP0=0, select bank0
  1051     02E8  1303               	bcf	3,6	;RP1=0, select bank0
  1052     02E9  00A8               	movwf	UART_transmit@CMD
  1053     02EA                     l926:
  1054                           
  1055                           ;main.c: 98:     unsigned char cmd[8] = {0};
  1056     02EA  3020               	movlw	UART_transmit@cmd& (0+255)
  1057     02EB  0084               	movwf	4
  1058     02EC  3008               	movlw	8
  1059     02ED  00FF               	movwf	btemp+1
  1060     02EE                     u260:
  1061     02EE  1383               	bcf	3,7	;select IRP bank0
  1062     02EF  0180               	clrf	0
  1063     02F0  0A84               	incf	4,f
  1064     02F1  0BFF               	decfsz	btemp+1,f
  1065     02F2  2AEE               	goto	u260
  1066     02F3                     l928:
  1067                           
  1068                           ;main.c: 99:     for (int i = 0; i < 8; i++){
  1069     02F3  01AB               	clrf	UART_transmit@i
  1070     02F4  01AC               	clrf	UART_transmit@i+1
  1071     02F5                     l934:
  1072                           
  1073                           ;main.c: 100:         cmd[i] = CMD[i];
  1074     02F5  1283               	bcf	3,5	;RP0=0, select bank0
  1075     02F6  1303               	bcf	3,6	;RP1=0, select bank0
  1076     02F7  082B               	movf	UART_transmit@i,w
  1077     02F8  0728               	addwf	UART_transmit@CMD,w
  1078     02F9  0084               	movwf	4
  1079     02FA  2001               	fcall	stringdir
  1080     02FB  00F3               	movwf	??_UART_transmit
  1081     02FC  082B               	movf	UART_transmit@i,w
  1082     02FD  3E20               	addlw	(low (UART_transmit@cmd| 0))& (0+255)
  1083     02FE  0084               	movwf	4
  1084     02FF  0873               	movf	??_UART_transmit,w
  1085     0300  1383               	bcf	3,7	;select IRP bank0
  1086     0301  0080               	movwf	0
  1087     0302                     l936:
  1088                           
  1089                           ;main.c: 101:     };
  1090     0302  3001               	movlw	1
  1091     0303  07AB               	addwf	UART_transmit@i,f
  1092     0304  1803               	skipnc
  1093     0305  0AAC               	incf	UART_transmit@i+1,f
  1094     0306  3000               	movlw	0
  1095     0307  07AC               	addwf	UART_transmit@i+1,f
  1096     0308                     l938:
  1097     0308  082C               	movf	UART_transmit@i+1,w
  1098     0309  3A80               	xorlw	128
  1099     030A  00FF               	movwf	btemp+1
  1100     030B  3080               	movlw	128
  1101     030C  027F               	subwf	btemp+1,w
  1102     030D  1D03               	skipz
  1103     030E  2B11               	goto	u275
  1104     030F  3008               	movlw	8
  1105     0310  022B               	subwf	UART_transmit@i,w
  1106     0311                     u275:
  1107     0311  1C03               	skipc
  1108     0312  2B14               	goto	u271
  1109     0313  2B15               	goto	u270
  1110     0314                     u271:
  1111     0314  2AF5               	goto	l934
  1112     0315                     u270:
  1113     0315                     l940:
  1114                           
  1115                           ;main.c: 104:     cmd[4] = feedback;
  1116     0315  0870               	movf	UART_transmit@feedback,w
  1117     0316  1283               	bcf	3,5	;RP0=0, select bank0
  1118     0317  1303               	bcf	3,6	;RP1=0, select bank0
  1119     0318  00A4               	movwf	UART_transmit@cmd+4
  1120                           
  1121                           ;main.c: 105:     cmd[5] = para1;
  1122     0319  0871               	movf	UART_transmit@para1,w
  1123     031A  00A5               	movwf	UART_transmit@cmd+5
  1124                           
  1125                           ;main.c: 106:     cmd[6] = para2;
  1126     031B  0872               	movf	UART_transmit@para2,w
  1127     031C  00A6               	movwf	UART_transmit@cmd+6
  1128     031D                     l942:
  1129                           
  1130                           ;main.c: 108:     for (int i = 0; i < 8; i++) {
  1131     031D  01A9               	clrf	UART_transmit@i_227
  1132     031E  01AA               	clrf	UART_transmit@i_227+1
  1133     031F                     l948:
  1134                           
  1135                           ;main.c: 109:         TXREG = cmd[i];
  1136     031F  1283               	bcf	3,5	;RP0=0, select bank0
  1137     0320  1303               	bcf	3,6	;RP1=0, select bank0
  1138     0321  0829               	movf	UART_transmit@i_227,w
  1139     0322  3E20               	addlw	(low (UART_transmit@cmd| 0))& (0+255)
  1140     0323  0084               	movwf	4
  1141     0324  1383               	bcf	3,7	;select IRP bank0
  1142     0325  0800               	movf	0,w
  1143     0326  0099               	movwf	25	;volatile
  1144     0327                     l950:
  1145                           
  1146                           ;main.c: 110:         _delay((unsigned long)((5)*(16000000/4000.0)));
  1147     0327  301A               	movlw	26
  1148     0328  00F4               	movwf	??_UART_transmit+1
  1149     0329  30F8               	movlw	248
  1150     032A  00F3               	movwf	??_UART_transmit
  1151     032B                     u447:
  1152     032B  0BF3               	decfsz	??_UART_transmit,f
  1153     032C  2B2B               	goto	u447
  1154     032D  0BF4               	decfsz	??_UART_transmit+1,f
  1155     032E  2B2B               	goto	u447
  1156     032F  0000               	nop
  1157     0330                     l952:
  1158                           
  1159                           ;main.c: 111:     };
  1160     0330  3001               	movlw	1
  1161     0331  1283               	bcf	3,5	;RP0=0, select bank0
  1162     0332  1303               	bcf	3,6	;RP1=0, select bank0
  1163     0333  07A9               	addwf	UART_transmit@i_227,f
  1164     0334  1803               	skipnc
  1165     0335  0AAA               	incf	UART_transmit@i_227+1,f
  1166     0336  3000               	movlw	0
  1167     0337  07AA               	addwf	UART_transmit@i_227+1,f
  1168     0338                     l954:
  1169     0338  082A               	movf	UART_transmit@i_227+1,w
  1170     0339  3A80               	xorlw	128
  1171     033A  00FF               	movwf	btemp+1
  1172     033B  3080               	movlw	128
  1173     033C  027F               	subwf	btemp+1,w
  1174     033D  1D03               	skipz
  1175     033E  2B41               	goto	u285
  1176     033F  3008               	movlw	8
  1177     0340  0229               	subwf	UART_transmit@i_227,w
  1178     0341                     u285:
  1179     0341  1C03               	skipc
  1180     0342  2B44               	goto	u281
  1181     0343  2B45               	goto	u280
  1182     0344                     u281:
  1183     0344  2B1F               	goto	l948
  1184     0345                     u280:
  1185     0345                     l74:
  1186     0345  0008               	return
  1187     0346                     __end_of_UART_transmit:
  1188                           
  1189                           	psect	text5
  1190     025B                     __ptext5:	
  1191 ;; *************** function _Flash *****************
  1192 ;; Defined at:
  1193 ;;		line 114 in file "main.c"
  1194 ;; Parameters:    Size  Location     Type
  1195 ;;		None
  1196 ;; Auto vars:     Size  Location     Type
  1197 ;;		None
  1198 ;; Return value:  Size  Location     Type
  1199 ;;                  1    wreg      void 
  1200 ;; Registers used:
  1201 ;;		wreg
  1202 ;; Tracked objects:
  1203 ;;		On entry : 0/0
  1204 ;;		On exit  : 0/0
  1205 ;;		Unchanged: 0/0
  1206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1207 ;;      Params:         0       0       0       0
  1208 ;;      Locals:         0       0       0       0
  1209 ;;      Temps:          2       0       0       0
  1210 ;;      Totals:         2       0       0       0
  1211 ;;Total ram usage:        2 bytes
  1212 ;; Hardware stack levels used: 1
  1213 ;; This function calls:
  1214 ;;		Nothing
  1215 ;; This function is called by:
  1216 ;;		_main
  1217 ;; This function uses a non-reentrant model
  1218 ;;
  1219                           
  1220     025B                     _Flash:	
  1221                           ;psect for function _Flash
  1222                           
  1223     025B                     l794:	
  1224                           ;incstack = 0
  1225                           ; Regs used in _Flash: [wreg]
  1226                           
  1227                           
  1228                           ;main.c: 115:     PORTBbits.RB5 = 1;
  1229     025B  1283               	bcf	3,5	;RP0=0, select bank0
  1230     025C  1303               	bcf	3,6	;RP1=0, select bank0
  1231     025D  1686               	bsf	6,5	;volatile
  1232     025E                     l796:
  1233                           
  1234                           ;main.c: 116:     _delay((unsigned long)((5)*(16000000/4000.0)));
  1235     025E  301A               	movlw	26
  1236     025F  00F1               	movwf	??_Flash+1
  1237     0260  30F8               	movlw	248
  1238     0261  00F0               	movwf	??_Flash
  1239     0262                     u457:
  1240     0262  0BF0               	decfsz	??_Flash,f
  1241     0263  2A62               	goto	u457
  1242     0264  0BF1               	decfsz	??_Flash+1,f
  1243     0265  2A62               	goto	u457
  1244     0266  0000               	nop
  1245     0267                     l798:
  1246                           
  1247                           ;main.c: 117:     PORTBbits.RB5 = 0;
  1248     0267  1283               	bcf	3,5	;RP0=0, select bank0
  1249     0268  1303               	bcf	3,6	;RP1=0, select bank0
  1250     0269  1286               	bcf	6,5	;volatile
  1251     026A                     l77:
  1252     026A  0008               	return
  1253     026B                     __end_of_Flash:
  1254     007E                     btemp	set	126	;btemp
  1255     007E                     wtemp0	set	126
  1256                           
  1257                           	psect	config
  1258                           
  1259                           ;Config register CONFIG @ 0x2007
  1260                           ;	Oscillator Selection bits
  1261                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
  1262                           ;	Watchdog Timer Enable bit
  1263                           ;	WDTE = OFF, WDT disabled
  1264                           ;	Power-up Timer Enable bit
  1265                           ;	PWRTE = ON, PWRT enabled
  1266                           ;	RA5/MCLR/VPP Pin Function Select bit
  1267                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD
  1268                           ;	Brown-out Detect Enable bit
  1269                           ;	BOREN = ON, BOD enabled
  1270                           ;	Low-Voltage Programming Enable bit
  1271                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  1272                           ;	Data EE Memory Code Protection bit
  1273                           ;	CPD = OFF, Data memory code protection off
  1274                           ;	Flash Program Memory Code Protection bit
  1275                           ;	CP = OFF, Code protection off
  1276     2007                     	org	8199
  1277     2007  3F50               	dw	16208

Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     13      21
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    UART_transmit@CMD	PTR unsigned char  size(1) Largest target is 8
		 -> voldown_cmd(CODE[8]), volup_cmd(CODE[8]), pause_cmd(CODE[8]), volset_cmd(CODE[8]), 


Critical Paths under _main in COMMON

    _init->_checkbit

Critical Paths under _main in BANK0

    _main->_UART_transmit

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    2121
                                              9 COMMON     5     5      0
                              _Flash
                      _UART_transmit
                               _init
                       _motor_switch
 ---------------------------------------------------------------------------------
 (1) _motor_switch                                         2     0      2     250
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _init                                                 2     2      0     415
                           _checkbit
 ---------------------------------------------------------------------------------
 (2) _checkbit                                             9     5      4     348
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _UART_transmit                                       18    15      3    1410
                                              0 COMMON     5     2      3
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (1) _Flash                                                2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Flash
   _UART_transmit
   _init
     _checkbit
   _motor_switch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      D      15       3       26.2%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      23       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      23      10        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Jan 10 02:38:25 2024

                      pc 0002                       l60 02E6                       l55 0297  
                     l65 027C                       l74 0345                       l90 039C  
                     l59 02D6                       l92 03A0                       l84 0364  
                     l77 026A                       l86 036A                       l96 03C1  
                     fsr 0004                      l100 03D1                      l900 02D3  
                    l910 02E2                      l902 02D9                      l912 02E3  
                    l904 02DD                      l920 026B                      l914 02E4  
                    l906 02E0                      l922 0271                      l940 0315  
                    l860 027D                      l916 02E5                      l908 02E1  
                    l924 0278                      l950 0327                      l942 031D  
                    l934 02F5                      l926 02EA                      l870 029E  
                    l952 0330                      l936 0302                      l928 02F3  
                    l880 02A9                      l872 029F                      l864 0298  
                    l794 025B                      l954 0338                      l938 0308  
                    l890 02B4                      l882 02AA                      l874 02A2  
                    l866 029C                      l796 025E                      l948 031F  
                    l892 02B4                      l884 02AB                      l876 02A3  
                    l868 029D                      l980 038B                      l972 036E  
                    l964 034B                      l956 0346                      l798 0267  
                    l894 02B7                      l886 02AE                      l878 02A6  
                    l990 03B6                      l982 038E                      l974 0373  
                    l966 0351                      l958 0347                      l896 02C3  
                    l888 02B2                      l992 03BA                      l976 037F  
                    l968 0357                      l898 02C6                      l986 03A4  
                    l994 03BB                      l978 0382                      l988 03A9  
                    l998 03C5                      u210 0296                      u211 0294  
                    u220 0297                      u204 0287                      u300 036A  
                    u205 0284                      u301 0369                      u230 02C3  
                    u310 036E                      u231 02C2                      u311 036D  
                    u240 02D3                      u320 03A0                      u241 02D2  
                    u321 039F                      u250 0271                      u330 03A4  
                    u251 0270                      u331 03A3                      u260 02EE  
                    u340 03C1                      u341 03C0                      u270 0315  
                    u350 03C5                      _PR2 0092                      u271 0314  
                    u351 03C4                      u407 0386                      u280 0345  
                    u360 03D1                      u281 0344                      u361 03D0  
                    u417 0394                      u370 03D5                      u290 0364  
                    u275 0311                      u371 03D4                      u427 03AF  
                    u291 0363                      u380 03E1                      u285 0341  
                    u437 03E7                      u381 03E0                      u447 032B  
                    u295 0360                      u457 0262                      u397 0379  
                    fsr0 0004                      indf 0000                     l1000 03CA  
                   l1002 03CB                     l1010 03DB                     l1012 03E1  
                   l1014 03EE                     l1006 03D5                     l1008 03DA  
                   _main 0346                     _init 0298                     btemp 007E  
            _voldown_cmd 000F                     start 0000                    ?_main 0070  
                  ?_init 0070                    _T2CON 0012                    _SPBRG 0099  
                  _TXREG 0019                    _Flash 025B                    main@i 007C  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 03F4             __end_of_main 03F4             __end_of_init 02E7  
                 ??_main 0079                   ??_init 0079                   ?_Flash 0070  
                 _CCPR1L 0015                   _TRISA0 0428                   _TRISA1 0429  
                 _TRISB0 0430                   _TRISB1 0431                   _TRISB2 0432  
                 _TRISB3 0433                   _TRISB4 0434                   _TRISA7 042F  
                 _TRISB5 0435                   _TRISB6 0436         __end_of_checkbit 0298  
__end_of__initialization 03FE            __end_of_Flash 026B           __pcstackCOMMON 0070  
                ??_Flash 0070               __pbssBANK0 002D    __end_of_UART_transmit 0346  
             __pmaintext 0346                ?_checkbit 0070               __stringtab 0001  
              _CMCONbits 001F         checkbit@position 0072                  __ptext1 026B  
                __ptext2 0298                  __ptext3 027D                  __ptext4 02E7  
                __ptext5 025B               ??_checkbit 0074        __end_of_pause_cmd 0027  
   end_of_initialization 03FE            ?_motor_switch 0070                _RCSTAbits 0018  
              _PORTAbits 0005                _PORTBbits 0006        __end_of_volup_cmd 001F  
         ??_motor_switch 0072    UART_transmit@feedback 0070              _CCP1CONbits 0017  
              _TXSTAbits 0098               _volset_cmd 0007      start_initialization 03F4  
              ___latbits 0000            __pcstackBANK0 0020             checkbit@data 0070  
   __end_of_motor_switch 027D       UART_transmit@i_227 0029                __pstrings 0001  
     UART_transmit@para1 0071       UART_transmit@para2 0072                _pause_cmd 001F  
         UART_transmit@i 002B              __stringbase 0006                _volup_cmd 0017  
          _UART_transmit 02E7       __end_of__stringtab 0007                 _checkbit 027D  
      UART_transmit@F573 002D           ?_UART_transmit 0070             _motor_switch 026B  
       UART_transmit@CMD 0028         UART_transmit@cmd 0020                stringcode 0001  
          motor_switch@x 0070      __end_of_voldown_cmd 0017                 stringdir 0001  
               stringtab 0001       __end_of_volset_cmd 000F          ??_UART_transmit 0073  
