

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sat Jan 20 02:19:46 2024

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F627A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17     0000                     
    18                           ; Generated 22/03/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F627A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52     0000                     	;# 
    53     0001                     	;# 
    54     0002                     	;# 
    55     0003                     	;# 
    56     0004                     	;# 
    57     0005                     	;# 
    58     0006                     	;# 
    59     000A                     	;# 
    60     000B                     	;# 
    61     000C                     	;# 
    62     000E                     	;# 
    63     000E                     	;# 
    64     000F                     	;# 
    65     0010                     	;# 
    66     0011                     	;# 
    67     0012                     	;# 
    68     0015                     	;# 
    69     0015                     	;# 
    70     0016                     	;# 
    71     0017                     	;# 
    72     0018                     	;# 
    73     0019                     	;# 
    74     001A                     	;# 
    75     001F                     	;# 
    76     0081                     	;# 
    77     0085                     	;# 
    78     0086                     	;# 
    79     008C                     	;# 
    80     008E                     	;# 
    81     0092                     	;# 
    82     0098                     	;# 
    83     0099                     	;# 
    84     009A                     	;# 
    85     009B                     	;# 
    86     009C                     	;# 
    87     009D                     	;# 
    88     009F                     	;# 
    89     0000                     	;# 
    90     0001                     	;# 
    91     0002                     	;# 
    92     0003                     	;# 
    93     0004                     	;# 
    94     0005                     	;# 
    95     0006                     	;# 
    96     000A                     	;# 
    97     000B                     	;# 
    98     000C                     	;# 
    99     000E                     	;# 
   100     000E                     	;# 
   101     000F                     	;# 
   102     0010                     	;# 
   103     0011                     	;# 
   104     0012                     	;# 
   105     0015                     	;# 
   106     0015                     	;# 
   107     0016                     	;# 
   108     0017                     	;# 
   109     0018                     	;# 
   110     0019                     	;# 
   111     001A                     	;# 
   112     001F                     	;# 
   113     0081                     	;# 
   114     0085                     	;# 
   115     0086                     	;# 
   116     008C                     	;# 
   117     008E                     	;# 
   118     0092                     	;# 
   119     0098                     	;# 
   120     0099                     	;# 
   121     009A                     	;# 
   122     009B                     	;# 
   123     009C                     	;# 
   124     009D                     	;# 
   125     009F                     	;# 
   126                           
   127                           	psect	strings
   128     0001                     __pstrings:
   129     0001                     stringtab:
   130     0001                     __stringtab:
   131     0001                     stringcode:	
   132                           ;	String table - string pointers are 1 byte each
   133                           
   134     0001                     stringdir:
   135     0001  3000               	movlw	high stringdir
   136     0002  008A               	movwf	10
   137     0003  0804               	movf	4,w
   138     0004  0A84               	incf	4,f
   139     0005  0782               	addwf	2,f
   140     0006                     __stringbase:
   141     0006  3400               	retlw	0
   142     0007                     __end_of__stringtab:
   143     0007                     _volset_cmd:
   144     0007  347E               	retlw	126
   145     0008  34FF               	retlw	255
   146     0009  3406               	retlw	6
   147     000A  3406               	retlw	6
   148     000B  3400               	retlw	0
   149     000C  3400               	retlw	0
   150     000D  3400               	retlw	0
   151     000E  34EF               	retlw	239
   152     000F                     __end_of_volset_cmd:
   153     000F                     _voldown_cmd:
   154     000F  347E               	retlw	126
   155     0010  34FF               	retlw	255
   156     0011  3406               	retlw	6
   157     0012  3405               	retlw	5
   158     0013  3400               	retlw	0
   159     0014  3400               	retlw	0
   160     0015  3400               	retlw	0
   161     0016  34EF               	retlw	239
   162     0017                     __end_of_voldown_cmd:
   163     0017                     _volup_cmd:
   164     0017  347E               	retlw	126
   165     0018  34FF               	retlw	255
   166     0019  3406               	retlw	6
   167     001A  3404               	retlw	4
   168     001B  3400               	retlw	0
   169     001C  3400               	retlw	0
   170     001D  3400               	retlw	0
   171     001E  34EF               	retlw	239
   172     001F                     __end_of_volup_cmd:
   173     001F                     _pause_cmd:
   174     001F  347E               	retlw	126
   175     0020  34FF               	retlw	255
   176     0021  3406               	retlw	6
   177     0022  340E               	retlw	14
   178     0023  3400               	retlw	0
   179     0024  3400               	retlw	0
   180     0025  3400               	retlw	0
   181     0026  34EF               	retlw	239
   182     0027                     __end_of_pause_cmd:
   183     0005                     _PORTAbits	set	5
   184     0006                     _PORTBbits	set	6
   185     0019                     _TXREG	set	25
   186     0012                     _T2CON	set	18
   187     0017                     _CCP1CONbits	set	23
   188     0015                     _CCPR1L	set	21
   189     0018                     _RCSTAbits	set	24
   190     001F                     _CMCONbits	set	31
   191     0099                     _SPBRG	set	153
   192     0098                     _TXSTAbits	set	152
   193     0092                     _PR2	set	146
   194     0434                     _TRISB4	set	1076
   195     0436                     _TRISB6	set	1078
   196     0435                     _TRISB5	set	1077
   197     0430                     _TRISB0	set	1072
   198     042F                     _TRISA7	set	1071
   199     042B                     _TRISA3	set	1067
   200     0428                     _TRISA0	set	1064
   201     0433                     _TRISB3	set	1075
   202     0432                     _TRISB2	set	1074
   203     0431                     _TRISB1	set	1073
   204                           
   205                           	psect	cinit
   206     03F4                     start_initialization:	
   207                           ; #config settings
   208                           
   209     03F4                     __initialization:
   210                           
   211                           ; Clear objects allocated to BANK0
   212     03F4  1283               	bcf	3,5	;RP0=0, select bank0
   213     03F5  1303               	bcf	3,6	;RP1=0, select bank0
   214     03F6  01B2               	clrf	__pbssBANK0& (0+127)
   215     03F7  01B3               	clrf	(__pbssBANK0+1)& (0+127)
   216     03F8  01B4               	clrf	(__pbssBANK0+2)& (0+127)
   217     03F9  01B5               	clrf	(__pbssBANK0+3)& (0+127)
   218     03FA  01B6               	clrf	(__pbssBANK0+4)& (0+127)
   219     03FB  01B7               	clrf	(__pbssBANK0+5)& (0+127)
   220     03FC  01B8               	clrf	(__pbssBANK0+6)& (0+127)
   221     03FD  01B9               	clrf	(__pbssBANK0+7)& (0+127)
   222     03FE                     end_of_initialization:	
   223                           ;End of C runtime variable initialization code
   224                           
   225     03FE                     __end_of__initialization:
   226     03FE  0183               	clrf	3
   227     03FF  2B69               	ljmp	_main	;jump to C main() function
   228                           
   229                           	psect	bssBANK0
   230     0032                     __pbssBANK0:
   231     0032                     UART_transmit@F573:
   232     0032                     	ds	8
   233                           
   234                           	psect	cstackCOMMON
   235     0070                     __pcstackCOMMON:
   236     0070                     ?_checkbit:
   237     0070                     ?_init:	
   238                           ; 1 bytes @ 0x0
   239                           
   240     0070                     ?_motor_switch:	
   241                           ; 1 bytes @ 0x0
   242                           
   243     0070                     ?_UART_transmit:	
   244                           ; 1 bytes @ 0x0
   245                           
   246     0070                     ?_Flash:	
   247                           ; 1 bytes @ 0x0
   248                           
   249     0070                     ??_Flash:	
   250                           ; 1 bytes @ 0x0
   251                           
   252     0070                     ?_main:	
   253                           ; 1 bytes @ 0x0
   254                           
   255     0070                     UART_transmit@feedback:	
   256                           ; 1 bytes @ 0x0
   257                           
   258     0070                     checkbit@data:	
   259                           ; 1 bytes @ 0x0
   260                           
   261     0070                     motor_switch@x:	
   262                           ; 2 bytes @ 0x0
   263                           
   264                           
   265                           ; 2 bytes @ 0x0
   266     0070                     	ds	1
   267     0071                     UART_transmit@para1:
   268                           
   269                           ; 1 bytes @ 0x1
   270     0071                     	ds	1
   271     0072                     ??_motor_switch:
   272     0072                     UART_transmit@para2:	
   273                           ; 1 bytes @ 0x2
   274                           
   275     0072                     checkbit@position:	
   276                           ; 1 bytes @ 0x2
   277                           
   278                           
   279                           ; 2 bytes @ 0x2
   280     0072                     	ds	1
   281     0073                     ??_UART_transmit:
   282                           
   283                           ; 1 bytes @ 0x3
   284     0073                     	ds	1
   285     0074                     ??_checkbit:
   286                           
   287                           ; 1 bytes @ 0x4
   288     0074                     	ds	5
   289     0079                     ??_init:
   290                           
   291                           ; 1 bytes @ 0x9
   292     0079                     	ds	2
   293     007B                     init@duty_cycle:
   294                           
   295                           ; 2 bytes @ 0xB
   296     007B                     	ds	2
   297                           
   298                           	psect	cstackBANK0
   299     0020                     __pcstackBANK0:
   300     0020                     UART_transmit@cmd:
   301                           
   302                           ; 8 bytes @ 0x0
   303     0020                     	ds	8
   304     0028                     UART_transmit@CMD:
   305                           
   306                           ; 1 bytes @ 0x8
   307     0028                     	ds	1
   308     0029                     UART_transmit@i_227:
   309                           
   310                           ; 2 bytes @ 0x9
   311     0029                     	ds	2
   312     002B                     UART_transmit@i:
   313                           
   314                           ; 2 bytes @ 0xB
   315     002B                     	ds	2
   316     002D                     ??_main:
   317                           
   318                           ; 1 bytes @ 0xD
   319     002D                     	ds	3
   320     0030                     main@i:
   321                           
   322                           ; 2 bytes @ 0x10
   323     0030                     	ds	2
   324                           
   325                           	psect	maintext
   326     0369                     __pmaintext:	
   327 ;;
   328 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   329 ;;
   330 ;; *************** function _main *****************
   331 ;; Defined at:
   332 ;;		line 120 in file "main.c"
   333 ;; Parameters:    Size  Location     Type
   334 ;;		None
   335 ;; Auto vars:     Size  Location     Type
   336 ;;  i               2   16[BANK0 ] int 
   337 ;; Return value:  Size  Location     Type
   338 ;;                  1    wreg      void 
   339 ;; Registers used:
   340 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   341 ;; Tracked objects:
   342 ;;		On entry : B00/0
   343 ;;		On exit  : 0/0
   344 ;;		Unchanged: 0/0
   345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   346 ;;      Params:         0       0       0       0
   347 ;;      Locals:         0       2       0       0
   348 ;;      Temps:          0       3       0       0
   349 ;;      Totals:         0       5       0       0
   350 ;;Total ram usage:        5 bytes
   351 ;; Hardware stack levels required when called: 2
   352 ;; This function calls:
   353 ;;		_Flash
   354 ;;		_UART_transmit
   355 ;;		_init
   356 ;;		_motor_switch
   357 ;; This function is called by:
   358 ;;		Startup code after reset
   359 ;; This function uses a non-reentrant model
   360 ;;
   361                           
   362     0369                     _main:	
   363                           ;psect for function _main
   364                           
   365     0369                     l949:	
   366                           ;incstack = 0
   367                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   368                           
   369                           
   370                           ;main.c: 122:     init();
   371     0369  2306               	fcall	_init
   372     036A                     l951:
   373                           
   374                           ;main.c: 123:     for (int i = 1; i < 5; i++){
   375     036A  3001               	movlw	1
   376     036B  1283               	bcf	3,5	;RP0=0, select bank0
   377     036C  1303               	bcf	3,6	;RP1=0, select bank0
   378     036D  00B0               	movwf	main@i
   379     036E  3000               	movlw	0
   380     036F  00B1               	movwf	main@i+1
   381     0370                     l957:
   382                           
   383                           ;main.c: 124:         UART_transmit(volset_cmd, 0x00, 0x00, 0x14);
   384     0370  01F0               	clrf	UART_transmit@feedback
   385     0371  01F1               	clrf	UART_transmit@para1
   386     0372  3014               	movlw	20
   387     0373  00F2               	movwf	UART_transmit@para2
   388     0374  3001               	movlw	(low ((_volset_cmd-__stringbase)| (0+32768)))& (0+255)
   389     0375  22A7               	fcall	_UART_transmit
   390     0376                     l959:
   391                           
   392                           ;main.c: 125:     };
   393     0376  3001               	movlw	1
   394     0377  1283               	bcf	3,5	;RP0=0, select bank0
   395     0378  1303               	bcf	3,6	;RP1=0, select bank0
   396     0379  07B0               	addwf	main@i,f
   397     037A  1803               	skipnc
   398     037B  0AB1               	incf	main@i+1,f
   399     037C  3000               	movlw	0
   400     037D  07B1               	addwf	main@i+1,f
   401     037E                     l961:
   402     037E  0831               	movf	main@i+1,w
   403     037F  3A80               	xorlw	128
   404     0380  00FF               	movwf	btemp+1
   405     0381  3080               	movlw	128
   406     0382  027F               	subwf	btemp+1,w
   407     0383  1D03               	skipz
   408     0384  2B87               	goto	u315
   409     0385  3005               	movlw	5
   410     0386  0230               	subwf	main@i,w
   411     0387                     u315:
   412     0387  1C03               	skipc
   413     0388  2B8A               	goto	u311
   414     0389  2B8B               	goto	u310
   415     038A                     u311:
   416     038A  2B70               	goto	l957
   417     038B                     u310:
   418     038B                     l84:	
   419                           ;main.c: 127:     while(1){
   420                           
   421                           
   422                           ;main.c: 128:         if (CMCONbits.C2OUT){
   423     038B  1283               	bcf	3,5	;RP0=0, select bank0
   424     038C  1303               	bcf	3,6	;RP1=0, select bank0
   425     038D  1F9F               	btfss	31,7	;volatile
   426     038E  2B90               	goto	u321
   427     038F  2B91               	goto	u320
   428     0390                     u321:
   429     0390  2B8B               	goto	l84
   430     0391                     u320:
   431     0391                     l963:
   432                           
   433                           ;main.c: 129:             if (PORTAbits.RA0){
   434     0391  1C05               	btfss	5,0	;volatile
   435     0392  2B94               	goto	u331
   436     0393  2B95               	goto	u330
   437     0394                     u331:
   438     0394  2B8B               	goto	l84
   439     0395                     u330:
   440     0395                     l87:
   441     0395  1805               	btfsc	5,0	;volatile
   442     0396  2B98               	goto	u341
   443     0397  2B99               	goto	u340
   444     0398                     u341:
   445     0398  2B95               	goto	l87
   446     0399                     u340:
   447     0399                     l967:
   448                           
   449                           ;main.c: 131:             motor_switch(1);
   450     0399  3001               	movlw	1
   451     039A  00F0               	movwf	motor_switch@x
   452     039B  3000               	movlw	0
   453     039C  00F1               	movwf	motor_switch@x+1
   454     039D  227A               	fcall	_motor_switch
   455                           
   456                           ;main.c: 133:             Flash();
   457     039E  226A               	fcall	_Flash
   458     039F                     l969:
   459                           
   460                           ;main.c: 134:             PORTAbits.RA3 = 1;
   461     039F  1283               	bcf	3,5	;RP0=0, select bank0
   462     03A0  1303               	bcf	3,6	;RP1=0, select bank0
   463     03A1  1585               	bsf	5,3	;volatile
   464     03A2                     l971:
   465                           
   466                           ;main.c: 135:             _delay((unsigned long)((500)*(16000000/4000.0)));
   467     03A2  300B               	movlw	11
   468     03A3  1283               	bcf	3,5	;RP0=0, select bank0
   469     03A4  1303               	bcf	3,6	;RP1=0, select bank0
   470     03A5  00AF               	movwf	??_main+2
   471     03A6  3026               	movlw	38
   472     03A7  00AE               	movwf	??_main+1
   473     03A8  305D               	movlw	93
   474     03A9  00AD               	movwf	??_main
   475     03AA                     u437:
   476     03AA  0BAD               	decfsz	??_main,f
   477     03AB  2BAA               	goto	u437
   478     03AC  0BAE               	decfsz	??_main+1,f
   479     03AD  2BAA               	goto	u437
   480     03AE  0BAF               	decfsz	??_main+2,f
   481     03AF  2BAA               	goto	u437
   482     03B0  0000               	nop
   483     03B1                     l973:
   484                           
   485                           ;main.c: 136:             PORTAbits.RA3 = 0;
   486     03B1  1283               	bcf	3,5	;RP0=0, select bank0
   487     03B2  1303               	bcf	3,6	;RP1=0, select bank0
   488     03B3  1185               	bcf	5,3	;volatile
   489                           
   490                           ;main.c: 138:             while(!PORTAbits.RA7){
   491     03B4  2BE7               	goto	l997
   492     03B5                     l91:
   493                           
   494                           ;main.c: 139:                 if (PORTBbits.RB0 || !CMCONbits.C2OUT){
   495     03B5  1806               	btfsc	6,0	;volatile
   496     03B6  2BB8               	goto	u351
   497     03B7  2BB9               	goto	u350
   498     03B8                     u351:
   499     03B8  2BBD               	goto	l95
   500     03B9                     u350:
   501     03B9                     l975:
   502     03B9  1B9F               	btfsc	31,7	;volatile
   503     03BA  2BBC               	goto	u361
   504     03BB  2BBD               	goto	u360
   505     03BC                     u361:
   506     03BC  2BC7               	goto	l981
   507     03BD                     u360:
   508     03BD                     l95:
   509     03BD  1806               	btfsc	6,0	;volatile
   510     03BE  2BC0               	goto	u371
   511     03BF  2BC1               	goto	u370
   512     03C0                     u371:
   513     03C0  2BBD               	goto	l95
   514     03C1                     u370:
   515     03C1                     l977:
   516                           
   517                           ;main.c: 141:                     UART_transmit(pause_cmd, 0x00, 0x00, 0x00);
   518     03C1  01F0               	clrf	UART_transmit@feedback
   519     03C2  01F1               	clrf	UART_transmit@para1
   520     03C3  01F2               	clrf	UART_transmit@para2
   521     03C4  3019               	movlw	(low ((_pause_cmd-__stringbase)| (0+32768)))& (0+255)
   522     03C5  22A7               	fcall	_UART_transmit
   523     03C6                     l979:
   524                           
   525                           ;main.c: 142:                     Flash();
   526     03C6  226A               	fcall	_Flash
   527     03C7                     l981:
   528                           
   529                           ;main.c: 144:                 if (PORTBbits.RB6){
   530     03C7  1283               	bcf	3,5	;RP0=0, select bank0
   531     03C8  1303               	bcf	3,6	;RP1=0, select bank0
   532     03C9  1F06               	btfss	6,6	;volatile
   533     03CA  2BCC               	goto	u381
   534     03CB  2BCD               	goto	u380
   535     03CC                     u381:
   536     03CC  2BD7               	goto	l989
   537     03CD                     u380:
   538     03CD                     l99:
   539     03CD  1B06               	btfsc	6,6	;volatile
   540     03CE  2BD0               	goto	u391
   541     03CF  2BD1               	goto	u390
   542     03D0                     u391:
   543     03D0  2BCD               	goto	l99
   544     03D1                     u390:
   545     03D1                     l985:
   546                           
   547                           ;main.c: 146:                     UART_transmit(volup_cmd, 0x00, 0x00, 0x00);
   548     03D1  01F0               	clrf	UART_transmit@feedback
   549     03D2  01F1               	clrf	UART_transmit@para1
   550     03D3  01F2               	clrf	UART_transmit@para2
   551     03D4  3011               	movlw	(low ((_volup_cmd-__stringbase)| (0+32768)))& (0+255)
   552     03D5  22A7               	fcall	_UART_transmit
   553     03D6                     l987:
   554                           
   555                           ;main.c: 147:                     Flash();
   556     03D6  226A               	fcall	_Flash
   557     03D7                     l989:
   558                           
   559                           ;main.c: 149:                 if (PORTBbits.RB4){
   560     03D7  1283               	bcf	3,5	;RP0=0, select bank0
   561     03D8  1303               	bcf	3,6	;RP1=0, select bank0
   562     03D9  1E06               	btfss	6,4	;volatile
   563     03DA  2BDC               	goto	u401
   564     03DB  2BDD               	goto	u400
   565     03DC                     u401:
   566     03DC  2BE7               	goto	l997
   567     03DD                     u400:
   568     03DD                     l103:
   569     03DD  1A06               	btfsc	6,4	;volatile
   570     03DE  2BE0               	goto	u411
   571     03DF  2BE1               	goto	u410
   572     03E0                     u411:
   573     03E0  2BDD               	goto	l103
   574     03E1                     u410:
   575     03E1                     l993:
   576                           
   577                           ;main.c: 151:                     UART_transmit(voldown_cmd, 0x00, 0x00, 0x00);
   578     03E1  01F0               	clrf	UART_transmit@feedback
   579     03E2  01F1               	clrf	UART_transmit@para1
   580     03E3  01F2               	clrf	UART_transmit@para2
   581     03E4  3009               	movlw	(low ((_voldown_cmd-__stringbase)| (0+32768)))& (0+255)
   582     03E5  22A7               	fcall	_UART_transmit
   583     03E6                     l995:
   584                           
   585                           ;main.c: 152:                     Flash();
   586     03E6  226A               	fcall	_Flash
   587     03E7                     l997:
   588                           
   589                           ;main.c: 138:             while(!PORTAbits.RA7){
   590     03E7  1283               	bcf	3,5	;RP0=0, select bank0
   591     03E8  1303               	bcf	3,6	;RP1=0, select bank0
   592     03E9  1F85               	btfss	5,7	;volatile
   593     03EA  2BEC               	goto	u421
   594     03EB  2BED               	goto	u420
   595     03EC                     u421:
   596     03EC  2BB5               	goto	l91
   597     03ED                     u420:
   598     03ED                     l999:
   599                           
   600                           ;main.c: 156:             motor_switch(0);
   601     03ED  3000               	movlw	0
   602     03EE  00F0               	movwf	motor_switch@x
   603     03EF  00F1               	movwf	motor_switch@x+1
   604     03F0  227A               	fcall	_motor_switch
   605                           
   606                           ;main.c: 157:             Flash();
   607     03F1  226A               	fcall	_Flash
   608     03F2  2B8B               	goto	l84
   609     03F3  2800               	ljmp	start
   610     03F4                     __end_of_main:
   611                           
   612                           	psect	text1
   613     027A                     __ptext1:	
   614 ;; *************** function _motor_switch *****************
   615 ;; Defined at:
   616 ;;		line 88 in file "main.c"
   617 ;; Parameters:    Size  Location     Type
   618 ;;  x               2    0[COMMON] int 
   619 ;; Auto vars:     Size  Location     Type
   620 ;;		None
   621 ;; Return value:  Size  Location     Type
   622 ;;                  1    wreg      void 
   623 ;; Registers used:
   624 ;;		wreg, status,2, status,0
   625 ;; Tracked objects:
   626 ;;		On entry : 0/0
   627 ;;		On exit  : 0/0
   628 ;;		Unchanged: 0/0
   629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   630 ;;      Params:         2       0       0       0
   631 ;;      Locals:         0       0       0       0
   632 ;;      Temps:          0       0       0       0
   633 ;;      Totals:         2       0       0       0
   634 ;;Total ram usage:        2 bytes
   635 ;; Hardware stack levels used: 1
   636 ;; This function calls:
   637 ;;		Nothing
   638 ;; This function is called by:
   639 ;;		_main
   640 ;; This function uses a non-reentrant model
   641 ;;
   642                           
   643     027A                     _motor_switch:	
   644                           ;psect for function _motor_switch
   645                           
   646     027A                     l907:	
   647                           ;incstack = 0
   648                           ; Regs used in _motor_switch: [wreg+status,2+status,0]
   649                           
   650                           
   651                           ;main.c: 89:     if (x){
   652     027A  0870               	movf	motor_switch@x,w
   653     027B  0471               	iorwf	motor_switch@x+1,w
   654     027C  1903               	btfsc	3,2
   655     027D  2A7F               	goto	u271
   656     027E  2A80               	goto	u270
   657     027F                     u271:
   658     027F  2A87               	goto	l911
   659     0280                     u270:
   660     0280                     l909:
   661                           
   662                           ;main.c: 90:         CCP1CONbits.CCP1M = 0b1100;
   663     0280  1283               	bcf	3,5	;RP0=0, select bank0
   664     0281  1303               	bcf	3,6	;RP1=0, select bank0
   665     0282  0817               	movf	23,w	;volatile
   666     0283  39F0               	andlw	-16
   667     0284  380C               	iorlw	12
   668     0285  0097               	movwf	23	;volatile
   669                           
   670                           ;main.c: 91:     }
   671     0286  2A8B               	goto	l65
   672     0287                     l911:
   673                           
   674                           ;main.c: 93:         CCP1CONbits.CCP1M = 0b0000;
   675     0287  30F0               	movlw	-16
   676     0288  1283               	bcf	3,5	;RP0=0, select bank0
   677     0289  1303               	bcf	3,6	;RP1=0, select bank0
   678     028A  0597               	andwf	23,f	;volatile
   679     028B                     l65:
   680     028B  0008               	return
   681     028C                     __end_of_motor_switch:
   682                           
   683                           	psect	text2
   684     0306                     __ptext2:	
   685 ;; *************** function _init *****************
   686 ;; Defined at:
   687 ;;		line 40 in file "main.c"
   688 ;; Parameters:    Size  Location     Type
   689 ;;		None
   690 ;; Auto vars:     Size  Location     Type
   691 ;;  duty_cycle      2   11[COMMON] unsigned int 
   692 ;; Return value:  Size  Location     Type
   693 ;;                  1    wreg      void 
   694 ;; Registers used:
   695 ;;		wreg, status,2, status,0, pclath, cstack
   696 ;; Tracked objects:
   697 ;;		On entry : 0/0
   698 ;;		On exit  : 0/0
   699 ;;		Unchanged: 0/0
   700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   701 ;;      Params:         0       0       0       0
   702 ;;      Locals:         2       0       0       0
   703 ;;      Temps:          2       0       0       0
   704 ;;      Totals:         4       0       0       0
   705 ;;Total ram usage:        4 bytes
   706 ;; Hardware stack levels used: 1
   707 ;; Hardware stack levels required when called: 1
   708 ;; This function calls:
   709 ;;		_checkbit
   710 ;; This function is called by:
   711 ;;		_main
   712 ;; This function uses a non-reentrant model
   713 ;;
   714                           
   715     0306                     _init:	
   716                           ;psect for function _init
   717                           
   718     0306                     l855:	
   719                           ;incstack = 0
   720                           ; Regs used in _init: [wreg+status,2+status,0+pclath+cstack]
   721                           
   722                           
   723                           ;main.c: 42:     CMCONbits.CM = 0b101;
   724     0306  1283               	bcf	3,5	;RP0=0, select bank0
   725     0307  1303               	bcf	3,6	;RP1=0, select bank0
   726     0308  081F               	movf	31,w	;volatile
   727     0309  39F8               	andlw	-8
   728     030A  3805               	iorlw	5
   729     030B  009F               	movwf	31	;volatile
   730     030C                     l857:
   731                           
   732                           ;main.c: 45:     CMCONbits.C2INV = 0;
   733     030C  129F               	bcf	31,5	;volatile
   734     030D                     l859:
   735                           
   736                           ;main.c: 48:     TRISB1 = 1;
   737     030D  1683               	bsf	3,5	;RP0=1, select bank1
   738     030E  1303               	bcf	3,6	;RP1=0, select bank1
   739     030F  1486               	bsf	6,1	;volatile
   740     0310                     l861:
   741                           
   742                           ;main.c: 49:     TRISB2 = 0;
   743     0310  1106               	bcf	6,2	;volatile
   744     0311                     l863:
   745                           
   746                           ;main.c: 50:     RCSTAbits.SPEN = 1;
   747     0311  1283               	bcf	3,5	;RP0=0, select bank0
   748     0312  1303               	bcf	3,6	;RP1=0, select bank0
   749     0313  1798               	bsf	24,7	;volatile
   750     0314                     l865:
   751                           
   752                           ;main.c: 52:     TXSTAbits.SYNC = 0;
   753     0314  1683               	bsf	3,5	;RP0=1, select bank1
   754     0315  1303               	bcf	3,6	;RP1=0, select bank1
   755     0316  1218               	bcf	24,4	;volatile
   756     0317                     l867:
   757                           
   758                           ;main.c: 53:     TXSTAbits.BRGH = 1;
   759     0317  1518               	bsf	24,2	;volatile
   760     0318                     l869:
   761                           
   762                           ;main.c: 55:     TXSTAbits.TXEN = 1;
   763     0318  1698               	bsf	24,5	;volatile
   764     0319                     l871:
   765                           
   766                           ;main.c: 56:     RCSTAbits.CREN = 0;
   767     0319  1283               	bcf	3,5	;RP0=0, select bank0
   768     031A  1303               	bcf	3,6	;RP1=0, select bank0
   769     031B  1218               	bcf	24,4	;volatile
   770     031C                     l873:
   771                           
   772                           ;main.c: 59:     SPBRG = 25;
   773     031C  3019               	movlw	25
   774     031D  1683               	bsf	3,5	;RP0=1, select bank1
   775     031E  1303               	bcf	3,6	;RP1=0, select bank1
   776     031F  0099               	movwf	25	;volatile
   777     0320                     l875:
   778                           
   779                           ;main.c: 63:     PR2 = (uint8_t)((16000000/(4*16*1))-1);
   780     0320  308F               	movlw	143
   781     0321  0092               	movwf	18	;volatile
   782     0322                     l877:
   783                           
   784                           ;main.c: 64:     uint16_t duty_cycle = (uint16_t) ((100/100)*PR2);
   785     0322  0812               	movf	18,w	;volatile
   786     0323  00F9               	movwf	??_init
   787     0324  01FA               	clrf	??_init+1
   788     0325  0879               	movf	??_init,w
   789     0326  00FB               	movwf	init@duty_cycle
   790     0327  087A               	movf	??_init+1,w
   791     0328  00FC               	movwf	init@duty_cycle+1
   792     0329                     l879:
   793                           
   794                           ;main.c: 65:     CCPR1L = duty_cycle >> 2;
   795     0329  087C               	movf	init@duty_cycle+1,w
   796     032A  00FA               	movwf	??_init+1
   797     032B  087B               	movf	init@duty_cycle,w
   798     032C  00F9               	movwf	??_init
   799     032D  1003               	clrc
   800     032E  0CFA               	rrf	??_init+1,f
   801     032F  0CF9               	rrf	??_init,f
   802     0330  1003               	clrc
   803     0331  0CFA               	rrf	??_init+1,f
   804     0332  0CF9               	rrf	??_init,f
   805     0333  0879               	movf	??_init,w
   806     0334  1283               	bcf	3,5	;RP0=0, select bank0
   807     0335  1303               	bcf	3,6	;RP1=0, select bank0
   808     0336  0095               	movwf	21	;volatile
   809     0337                     l881:
   810                           
   811                           ;main.c: 67:     if (checkbit(duty_cycle, 0)){
   812     0337  087C               	movf	init@duty_cycle+1,w
   813     0338  00F1               	movwf	checkbit@data+1
   814     0339  087B               	movf	init@duty_cycle,w
   815     033A  00F0               	movwf	checkbit@data
   816     033B  3000               	movlw	0
   817     033C  00F2               	movwf	checkbit@position
   818     033D  00F3               	movwf	checkbit@position+1
   819     033E  228C               	fcall	_checkbit
   820     033F  3A00               	xorlw	0
   821     0340  1903               	skipnz
   822     0341  2B43               	goto	u251
   823     0342  2B44               	goto	u250
   824     0343                     u251:
   825     0343  2B47               	goto	l885
   826     0344                     u250:
   827     0344                     l883:
   828                           
   829                           ;main.c: 68:         CCP1CONbits.CCP1Y = 1;
   830     0344  1283               	bcf	3,5	;RP0=0, select bank0
   831     0345  1303               	bcf	3,6	;RP1=0, select bank0
   832     0346  1617               	bsf	23,4	;volatile
   833     0347                     l885:
   834                           
   835                           ;main.c: 70:     if (checkbit(duty_cycle, 1)){
   836     0347  087C               	movf	init@duty_cycle+1,w
   837     0348  00F1               	movwf	checkbit@data+1
   838     0349  087B               	movf	init@duty_cycle,w
   839     034A  00F0               	movwf	checkbit@data
   840     034B  3001               	movlw	1
   841     034C  00F2               	movwf	checkbit@position
   842     034D  3000               	movlw	0
   843     034E  00F3               	movwf	checkbit@position+1
   844     034F  228C               	fcall	_checkbit
   845     0350  3A00               	xorlw	0
   846     0351  1903               	skipnz
   847     0352  2B54               	goto	u261
   848     0353  2B55               	goto	u260
   849     0354                     u261:
   850     0354  2B58               	goto	l59
   851     0355                     u260:
   852     0355                     l887:
   853                           
   854                           ;main.c: 71:         CCP1CONbits.CCP1X = 1;
   855     0355  1283               	bcf	3,5	;RP0=0, select bank0
   856     0356  1303               	bcf	3,6	;RP1=0, select bank0
   857     0357  1697               	bsf	23,5	;volatile
   858     0358                     l59:	
   859                           ;main.c: 72:     };
   860                           
   861                           
   862                           ;main.c: 73:     TRISB3 = 0;
   863     0358  1683               	bsf	3,5	;RP0=1, select bank1
   864     0359  1303               	bcf	3,6	;RP1=0, select bank1
   865     035A  1186               	bcf	6,3	;volatile
   866     035B                     l889:
   867                           
   868                           ;main.c: 74:     T2CON = 0b00000110;
   869     035B  3006               	movlw	6
   870     035C  1283               	bcf	3,5	;RP0=0, select bank0
   871     035D  1303               	bcf	3,6	;RP1=0, select bank0
   872     035E  0092               	movwf	18	;volatile
   873     035F                     l891:
   874                           
   875                           ;main.c: 78:     TRISA0 = 1;
   876     035F  1683               	bsf	3,5	;RP0=1, select bank1
   877     0360  1303               	bcf	3,6	;RP1=0, select bank1
   878     0361  1405               	bsf	5,0	;volatile
   879     0362                     l893:
   880                           
   881                           ;main.c: 79:     TRISA3 = 0;
   882     0362  1185               	bcf	5,3	;volatile
   883     0363                     l895:
   884                           
   885                           ;main.c: 80:     TRISA7 = 1;
   886     0363  1785               	bsf	5,7	;volatile
   887     0364                     l897:
   888                           
   889                           ;main.c: 81:     TRISB0 = 1;
   890     0364  1406               	bsf	6,0	;volatile
   891     0365                     l899:
   892                           
   893                           ;main.c: 82:     TRISB5 = 0;
   894     0365  1286               	bcf	6,5	;volatile
   895     0366                     l901:
   896                           
   897                           ;main.c: 83:     TRISB6 = 1;
   898     0366  1706               	bsf	6,6	;volatile
   899     0367                     l903:
   900                           
   901                           ;main.c: 84:     TRISB4 = 1;
   902     0367  1606               	bsf	6,4	;volatile
   903     0368                     l60:
   904     0368  0008               	return
   905     0369                     __end_of_init:
   906                           
   907                           	psect	text3
   908     028C                     __ptext3:	
   909 ;; *************** function _checkbit *****************
   910 ;; Defined at:
   911 ;;		line 36 in file "main.c"
   912 ;; Parameters:    Size  Location     Type
   913 ;;  data            2    0[COMMON] unsigned int 
   914 ;;  position        2    2[COMMON] int 
   915 ;; Auto vars:     Size  Location     Type
   916 ;;		None
   917 ;; Return value:  Size  Location     Type
   918 ;;                  1    wreg      _Bool 
   919 ;; Registers used:
   920 ;;		wreg, status,2, status,0
   921 ;; Tracked objects:
   922 ;;		On entry : 0/0
   923 ;;		On exit  : 0/0
   924 ;;		Unchanged: 0/0
   925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   926 ;;      Params:         4       0       0       0
   927 ;;      Locals:         0       0       0       0
   928 ;;      Temps:          5       0       0       0
   929 ;;      Totals:         9       0       0       0
   930 ;;Total ram usage:        9 bytes
   931 ;; Hardware stack levels used: 1
   932 ;; This function calls:
   933 ;;		Nothing
   934 ;; This function is called by:
   935 ;;		_init
   936 ;; This function uses a non-reentrant model
   937 ;;
   938                           
   939     028C                     _checkbit:	
   940                           ;psect for function _checkbit
   941                           
   942     028C                     l851:	
   943                           ;incstack = 0
   944                           ; Regs used in _checkbit: [wreg+status,2+status,0]
   945                           
   946                           
   947                           ;main.c: 37:     return data & (1 << position);
   948     028C  0A72               	incf	checkbit@position,w
   949     028D  00F4               	movwf	??_checkbit
   950     028E  3001               	movlw	1
   951     028F  00F5               	movwf	??_checkbit+1
   952     0290  3000               	movlw	0
   953     0291  00F6               	movwf	??_checkbit+2
   954     0292  2A96               	goto	u224
   955     0293                     u225:
   956     0293  1003               	clrc
   957     0294  0DF5               	rlf	??_checkbit+1,f
   958     0295  0DF6               	rlf	??_checkbit+2,f
   959     0296                     u224:
   960     0296  0BF4               	decfsz	??_checkbit,f
   961     0297  2A93               	goto	u225
   962     0298  0870               	movf	checkbit@data,w
   963     0299  0575               	andwf	??_checkbit+1,w
   964     029A  00F7               	movwf	??_checkbit+3
   965     029B  0871               	movf	checkbit@data+1,w
   966     029C  0576               	andwf	??_checkbit+2,w
   967     029D  00F8               	movwf	??_checkbit+4
   968     029E  0877               	movf	??_checkbit+3,w
   969     029F  0478               	iorwf	??_checkbit+4,w
   970     02A0  1D03               	btfss	3,2
   971     02A1  2AA3               	goto	u231
   972     02A2  2AA5               	goto	u230
   973     02A3                     u231:
   974     02A3  3001               	movlw	1
   975     02A4  2AA6               	goto	u240
   976     02A5                     u230:
   977     02A5  3000               	movlw	0
   978     02A6                     u240:
   979     02A6                     l55:
   980     02A6  0008               	return
   981     02A7                     __end_of_checkbit:
   982                           
   983                           	psect	text4
   984     02A7                     __ptext4:	
   985 ;; *************** function _UART_transmit *****************
   986 ;; Defined at:
   987 ;;		line 96 in file "main.c"
   988 ;; Parameters:    Size  Location     Type
   989 ;;  CMD             1    wreg     PTR unsigned char 
   990 ;;		 -> voldown_cmd(8), volup_cmd(8), pause_cmd(8), volset_cmd(8), 
   991 ;;  feedback        1    0[COMMON] unsigned char 
   992 ;;  para1           1    1[COMMON] unsigned char 
   993 ;;  para2           1    2[COMMON] unsigned char 
   994 ;; Auto vars:     Size  Location     Type
   995 ;;  CMD             1    8[BANK0 ] PTR unsigned char 
   996 ;;		 -> voldown_cmd(8), volup_cmd(8), pause_cmd(8), volset_cmd(8), 
   997 ;;  i               2    9[BANK0 ] int 
   998 ;;  i               2   11[BANK0 ] int 
   999 ;;  cmd             8    0[BANK0 ] unsigned char [8]
  1000 ;; Return value:  Size  Location     Type
  1001 ;;                  1    wreg      void 
  1002 ;; Registers used:
  1003 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  1004 ;; Tracked objects:
  1005 ;;		On entry : 0/0
  1006 ;;		On exit  : 0/0
  1007 ;;		Unchanged: 0/0
  1008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1009 ;;      Params:         3       0       0       0
  1010 ;;      Locals:         0      13       0       0
  1011 ;;      Temps:          2       0       0       0
  1012 ;;      Totals:         5      13       0       0
  1013 ;;Total ram usage:       18 bytes
  1014 ;; Hardware stack levels used: 2
  1015 ;; This function calls:
  1016 ;;		Nothing
  1017 ;; This function is called by:
  1018 ;;		_main
  1019 ;; This function uses a non-reentrant model
  1020 ;;
  1021                           
  1022     02A7                     _UART_transmit:	
  1023                           ;psect for function _UART_transmit
  1024                           
  1025                           
  1026                           ;incstack = 0
  1027                           ; Regs used in _UART_transmit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  1028                           ;UART_transmit@CMD stored from wreg
  1029     02A7  1283               	bcf	3,5	;RP0=0, select bank0
  1030     02A8  1303               	bcf	3,6	;RP1=0, select bank0
  1031     02A9  00A8               	movwf	UART_transmit@CMD
  1032     02AA                     l913:
  1033                           
  1034                           ;main.c: 98:     unsigned char cmd[8] = {0};
  1035     02AA  3020               	movlw	UART_transmit@cmd& (0+255)
  1036     02AB  0084               	movwf	4
  1037     02AC  3008               	movlw	8
  1038     02AD  00FF               	movwf	btemp+1
  1039     02AE                     u280:
  1040     02AE  1383               	bcf	3,7	;select IRP bank0
  1041     02AF  0180               	clrf	0
  1042     02B0  0A84               	incf	4,f
  1043     02B1  0BFF               	decfsz	btemp+1,f
  1044     02B2  2AAE               	goto	u280
  1045     02B3                     l915:
  1046                           
  1047                           ;main.c: 99:     for (int i = 0; i < 8; i++){
  1048     02B3  01AB               	clrf	UART_transmit@i
  1049     02B4  01AC               	clrf	UART_transmit@i+1
  1050     02B5                     l921:
  1051                           
  1052                           ;main.c: 100:         cmd[i] = CMD[i];
  1053     02B5  1283               	bcf	3,5	;RP0=0, select bank0
  1054     02B6  1303               	bcf	3,6	;RP1=0, select bank0
  1055     02B7  082B               	movf	UART_transmit@i,w
  1056     02B8  0728               	addwf	UART_transmit@CMD,w
  1057     02B9  0084               	movwf	4
  1058     02BA  2001               	fcall	stringdir
  1059     02BB  00F3               	movwf	??_UART_transmit
  1060     02BC  082B               	movf	UART_transmit@i,w
  1061     02BD  3E20               	addlw	(low (UART_transmit@cmd| 0))& (0+255)
  1062     02BE  0084               	movwf	4
  1063     02BF  0873               	movf	??_UART_transmit,w
  1064     02C0  1383               	bcf	3,7	;select IRP bank0
  1065     02C1  0080               	movwf	0
  1066     02C2                     l923:
  1067                           
  1068                           ;main.c: 101:     };
  1069     02C2  3001               	movlw	1
  1070     02C3  07AB               	addwf	UART_transmit@i,f
  1071     02C4  1803               	skipnc
  1072     02C5  0AAC               	incf	UART_transmit@i+1,f
  1073     02C6  3000               	movlw	0
  1074     02C7  07AC               	addwf	UART_transmit@i+1,f
  1075     02C8                     l925:
  1076     02C8  082C               	movf	UART_transmit@i+1,w
  1077     02C9  3A80               	xorlw	128
  1078     02CA  00FF               	movwf	btemp+1
  1079     02CB  3080               	movlw	128
  1080     02CC  027F               	subwf	btemp+1,w
  1081     02CD  1D03               	skipz
  1082     02CE  2AD1               	goto	u295
  1083     02CF  3008               	movlw	8
  1084     02D0  022B               	subwf	UART_transmit@i,w
  1085     02D1                     u295:
  1086     02D1  1C03               	skipc
  1087     02D2  2AD4               	goto	u291
  1088     02D3  2AD5               	goto	u290
  1089     02D4                     u291:
  1090     02D4  2AB5               	goto	l921
  1091     02D5                     u290:
  1092     02D5                     l927:
  1093                           
  1094                           ;main.c: 104:     cmd[4] = feedback;
  1095     02D5  0870               	movf	UART_transmit@feedback,w
  1096     02D6  1283               	bcf	3,5	;RP0=0, select bank0
  1097     02D7  1303               	bcf	3,6	;RP1=0, select bank0
  1098     02D8  00A4               	movwf	UART_transmit@cmd+4
  1099                           
  1100                           ;main.c: 105:     cmd[5] = para1;
  1101     02D9  0871               	movf	UART_transmit@para1,w
  1102     02DA  00A5               	movwf	UART_transmit@cmd+5
  1103                           
  1104                           ;main.c: 106:     cmd[6] = para2;
  1105     02DB  0872               	movf	UART_transmit@para2,w
  1106     02DC  00A6               	movwf	UART_transmit@cmd+6
  1107     02DD                     l929:
  1108                           
  1109                           ;main.c: 108:     for (int i = 0; i < 8; i++) {
  1110     02DD  01A9               	clrf	UART_transmit@i_227
  1111     02DE  01AA               	clrf	UART_transmit@i_227+1
  1112     02DF                     l935:
  1113                           
  1114                           ;main.c: 109:         TXREG = cmd[i];
  1115     02DF  1283               	bcf	3,5	;RP0=0, select bank0
  1116     02E0  1303               	bcf	3,6	;RP1=0, select bank0
  1117     02E1  0829               	movf	UART_transmit@i_227,w
  1118     02E2  3E20               	addlw	(low (UART_transmit@cmd| 0))& (0+255)
  1119     02E3  0084               	movwf	4
  1120     02E4  1383               	bcf	3,7	;select IRP bank0
  1121     02E5  0800               	movf	0,w
  1122     02E6  0099               	movwf	25	;volatile
  1123     02E7                     l937:
  1124                           
  1125                           ;main.c: 110:         _delay((unsigned long)((5)*(16000000/4000.0)));
  1126     02E7  301A               	movlw	26
  1127     02E8  00F4               	movwf	??_UART_transmit+1
  1128     02E9  30F8               	movlw	248
  1129     02EA  00F3               	movwf	??_UART_transmit
  1130     02EB                     u447:
  1131     02EB  0BF3               	decfsz	??_UART_transmit,f
  1132     02EC  2AEB               	goto	u447
  1133     02ED  0BF4               	decfsz	??_UART_transmit+1,f
  1134     02EE  2AEB               	goto	u447
  1135     02EF  0000               	nop
  1136     02F0                     l939:
  1137                           
  1138                           ;main.c: 111:     };
  1139     02F0  3001               	movlw	1
  1140     02F1  1283               	bcf	3,5	;RP0=0, select bank0
  1141     02F2  1303               	bcf	3,6	;RP1=0, select bank0
  1142     02F3  07A9               	addwf	UART_transmit@i_227,f
  1143     02F4  1803               	skipnc
  1144     02F5  0AAA               	incf	UART_transmit@i_227+1,f
  1145     02F6  3000               	movlw	0
  1146     02F7  07AA               	addwf	UART_transmit@i_227+1,f
  1147     02F8                     l941:
  1148     02F8  082A               	movf	UART_transmit@i_227+1,w
  1149     02F9  3A80               	xorlw	128
  1150     02FA  00FF               	movwf	btemp+1
  1151     02FB  3080               	movlw	128
  1152     02FC  027F               	subwf	btemp+1,w
  1153     02FD  1D03               	skipz
  1154     02FE  2B01               	goto	u305
  1155     02FF  3008               	movlw	8
  1156     0300  0229               	subwf	UART_transmit@i_227,w
  1157     0301                     u305:
  1158     0301  1C03               	skipc
  1159     0302  2B04               	goto	u301
  1160     0303  2B05               	goto	u300
  1161     0304                     u301:
  1162     0304  2ADF               	goto	l935
  1163     0305                     u300:
  1164     0305                     l74:
  1165     0305  0008               	return
  1166     0306                     __end_of_UART_transmit:
  1167                           
  1168                           	psect	text5
  1169     026A                     __ptext5:	
  1170 ;; *************** function _Flash *****************
  1171 ;; Defined at:
  1172 ;;		line 114 in file "main.c"
  1173 ;; Parameters:    Size  Location     Type
  1174 ;;		None
  1175 ;; Auto vars:     Size  Location     Type
  1176 ;;		None
  1177 ;; Return value:  Size  Location     Type
  1178 ;;                  1    wreg      void 
  1179 ;; Registers used:
  1180 ;;		wreg
  1181 ;; Tracked objects:
  1182 ;;		On entry : 0/0
  1183 ;;		On exit  : 0/0
  1184 ;;		Unchanged: 0/0
  1185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1186 ;;      Params:         0       0       0       0
  1187 ;;      Locals:         0       0       0       0
  1188 ;;      Temps:          2       0       0       0
  1189 ;;      Totals:         2       0       0       0
  1190 ;;Total ram usage:        2 bytes
  1191 ;; Hardware stack levels used: 1
  1192 ;; This function calls:
  1193 ;;		Nothing
  1194 ;; This function is called by:
  1195 ;;		_main
  1196 ;; This function uses a non-reentrant model
  1197 ;;
  1198                           
  1199     026A                     _Flash:	
  1200                           ;psect for function _Flash
  1201                           
  1202     026A                     l943:	
  1203                           ;incstack = 0
  1204                           ; Regs used in _Flash: [wreg]
  1205                           
  1206                           
  1207                           ;main.c: 115:     PORTBbits.RB5 = 1;
  1208     026A  1283               	bcf	3,5	;RP0=0, select bank0
  1209     026B  1303               	bcf	3,6	;RP1=0, select bank0
  1210     026C  1686               	bsf	6,5	;volatile
  1211     026D                     l945:
  1212                           
  1213                           ;main.c: 116:     _delay((unsigned long)((5)*(16000000/4000.0)));
  1214     026D  301A               	movlw	26
  1215     026E  00F1               	movwf	??_Flash+1
  1216     026F  30F8               	movlw	248
  1217     0270  00F0               	movwf	??_Flash
  1218     0271                     u457:
  1219     0271  0BF0               	decfsz	??_Flash,f
  1220     0272  2A71               	goto	u457
  1221     0273  0BF1               	decfsz	??_Flash+1,f
  1222     0274  2A71               	goto	u457
  1223     0275  0000               	nop
  1224     0276                     l947:
  1225                           
  1226                           ;main.c: 117:     PORTBbits.RB5 = 0;
  1227     0276  1283               	bcf	3,5	;RP0=0, select bank0
  1228     0277  1303               	bcf	3,6	;RP1=0, select bank0
  1229     0278  1286               	bcf	6,5	;volatile
  1230     0279                     l77:
  1231     0279  0008               	return
  1232     027A                     __end_of_Flash:
  1233     007E                     btemp	set	126	;btemp
  1234     007E                     wtemp0	set	126
  1235                           
  1236                           	psect	config
  1237                           
  1238                           ;Config register CONFIG @ 0x2007
  1239                           ;	Oscillator Selection bits
  1240                           ;	FOSC = INTOSCIO, INTOSC oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function 
      +                          on RA7/OSC1/CLKIN
  1241                           ;	Watchdog Timer Enable bit
  1242                           ;	WDTE = OFF, WDT disabled
  1243                           ;	Power-up Timer Enable bit
  1244                           ;	PWRTE = ON, PWRT enabled
  1245                           ;	RA5/MCLR/VPP Pin Function Select bit
  1246                           ;	MCLRE = OFF, RA5/MCLR/VPP pin function is digital input, MCLR internally tied to VDD
  1247                           ;	Brown-out Detect Enable bit
  1248                           ;	BOREN = ON, BOD enabled
  1249                           ;	Low-Voltage Programming Enable bit
  1250                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  1251                           ;	Data EE Memory Code Protection bit
  1252                           ;	CPD = OFF, Data memory code protection off
  1253                           ;	Flash Program Memory Code Protection bit
  1254                           ;	CP = OFF, Code protection off
  1255     2007                     	org	8199
  1256     2007  3F50               	dw	16208

Data Sizes:
    Strings     0
    Constant    32
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     18      26
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    UART_transmit@CMD	PTR unsigned char  size(1) Largest target is 8
		 -> voldown_cmd(CODE[8]), volup_cmd(CODE[8]), pause_cmd(CODE[8]), volset_cmd(CODE[8]), 


Critical Paths under _main in COMMON

    _main->_init
    _init->_checkbit

Critical Paths under _main in BANK0

    _main->_UART_transmit

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    2045
                                             13 BANK0      5     5      0
                              _Flash
                      _UART_transmit
                               _init
                       _motor_switch
 ---------------------------------------------------------------------------------
 (1) _motor_switch                                         2     0      2     174
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _init                                                 4     4      0     415
                                              9 COMMON     4     4      0
                           _checkbit
 ---------------------------------------------------------------------------------
 (2) _checkbit                                             9     5      4     348
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _UART_transmit                                       18    15      3    1410
                                              0 COMMON     5     2      3
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (1) _Flash                                                2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Flash
   _UART_transmit
   _init
     _checkbit
   _motor_switch

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     12      1A       3       32.5%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      27       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      27      10        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sat Jan 20 02:19:46 2024

                      pc 0002                       l60 0368                       l55 02A6  
                     l65 028B                       l74 0305                       l59 0358  
                     l91 03B5                       l84 038B                       l77 0279  
                     l95 03BD                       l87 0395                       l99 03CD  
                     fsr 0004                      l103 03DD                      l901 0366  
                    l903 0367                      l911 0287                      l921 02B5  
                    l913 02AA                      l923 02C2                      l915 02B3  
                    l851 028C                      l907 027A                      l941 02F8  
                    l925 02C8                      l861 0310                      l909 0280  
                    l943 026A                      l935 02DF                      l927 02D5  
                    l871 0319                      l863 0311                      l855 0306  
                    l951 036A                      l945 026D                      l937 02E7  
                    l929 02DD                      l881 0337                      l873 031C  
                    l865 0314                      l857 030C                      l961 037E  
                    l947 0276                      l939 02F0                      l891 035F  
                    l883 0344                      l875 0320                      l867 0317  
                    l859 030D                      l971 03A2                      l963 0391  
                    l893 0362                      l885 0347                      l877 0322  
                    l869 0318                      l981 03C7                      l973 03B1  
                    l957 0370                      l949 0369                      l895 0363  
                    l887 0355                      l879 0329                      l975 03B9  
                    l967 0399                      l959 0376                      l897 0364  
                    l889 035B                      l993 03E1                      l985 03D1  
                    l977 03C1                      l969 039F                      l899 0365  
                    l995 03E6                      l987 03D6                      l979 03C6  
                    l989 03D7                      l997 03E7                      l999 03ED  
                    u300 0305                      u301 0304                      u230 02A5  
                    u310 038B                      u231 02A3                      u311 038A  
                    u240 02A6                      u224 0296                      u400 03DD  
                    u320 0391                      u305 0301                      u225 0293  
                    u401 03DC                      u321 0390                      u250 0344  
                    u410 03E1                      u330 0395                      u251 0343  
                    u411 03E0                      u331 0394                      u315 0387  
                    u260 0355                      u420 03ED                      u340 0399  
                    u261 0354                      u421 03EC                      u341 0398  
                    u270 0280                      u350 03B9                      _PR2 0092  
                    u271 027F                      u351 03B8                      u280 02AE  
                    u360 03BD                      u361 03BC                      u290 02D5  
                    u370 03C1                      u291 02D4                      u371 03C0  
                    u380 03CD                      u381 03CC                      u437 03AA  
                    u390 03D1                      u447 02EB                      u295 02D1  
                    u391 03D0                      u457 0271                      fsr0 0004  
                    indf 0000                     _main 0369                     _init 0306  
                   btemp 007E              _voldown_cmd 000F                     start 0000  
                  ?_main 0070                    ?_init 0070                    _T2CON 0012  
                  _SPBRG 0099                    _TXREG 0019                    _Flash 026A  
                  main@i 0030                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 03F4             __end_of_main 03F4  
           __end_of_init 0369                   ??_main 002D                   ??_init 0079  
                 ?_Flash 0070                   _CCPR1L 0015                   _TRISA0 0428  
                 _TRISB0 0430                   _TRISB1 0431                   _TRISA3 042B  
                 _TRISB2 0432                   _TRISB3 0433                   _TRISB4 0434  
                 _TRISA7 042F                   _TRISB5 0435                   _TRISB6 0436  
       __end_of_checkbit 02A7  __end_of__initialization 03FE            __end_of_Flash 027A  
         __pcstackCOMMON 0070           init@duty_cycle 007B                  ??_Flash 0070  
             __pbssBANK0 0032    __end_of_UART_transmit 0306               __pmaintext 0369  
              ?_checkbit 0070               __stringtab 0001                _CMCONbits 001F  
       checkbit@position 0072                  __ptext1 027A                  __ptext2 0306  
                __ptext3 028C                  __ptext4 02A7                  __ptext5 026A  
             ??_checkbit 0074        __end_of_pause_cmd 0027     end_of_initialization 03FE  
          ?_motor_switch 0070                _RCSTAbits 0018                _PORTAbits 0005  
              _PORTBbits 0006        __end_of_volup_cmd 001F           ??_motor_switch 0072  
  UART_transmit@feedback 0070              _CCP1CONbits 0017                _TXSTAbits 0098  
             _volset_cmd 0007      start_initialization 03F4                ___latbits 0000  
          __pcstackBANK0 0020             checkbit@data 0070     __end_of_motor_switch 028C  
     UART_transmit@i_227 0029                __pstrings 0001       UART_transmit@para1 0071  
     UART_transmit@para2 0072                _pause_cmd 001F           UART_transmit@i 002B  
            __stringbase 0006                _volup_cmd 0017            _UART_transmit 02A7  
     __end_of__stringtab 0007                 _checkbit 028C        UART_transmit@F573 0032  
         ?_UART_transmit 0070             _motor_switch 027A         UART_transmit@CMD 0028  
       UART_transmit@cmd 0020                stringcode 0001            motor_switch@x 0070  
    __end_of_voldown_cmd 0017                 stringdir 0001                 stringtab 0001  
     __end_of_volset_cmd 000F          ??_UART_transmit 0073  
